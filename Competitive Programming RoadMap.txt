

Comprehensive Competitive Programming Roadmap:  
An end-to-end, master’s-level curriculum covering every aspect of competitive programming—from foundational skills through advanced algorithms, contest strategies, tooling, and interview preparation.



1. Getting Started  
1.1 Course Overview & Objectives  
1.2 Prerequisites  
- Proficiency in at least one language (C++ recommended, Python/Java acceptable)  
- Basic programming constructs: variables, control flow, functions  
1.3 Environment Setup  
- IDEs: VS Code, CLion, Code::Blocks  
- Compiler/toolchain: GCC, Clang, MSVC  
- Version control: Git  
- Helpful tools: CMake, Makefiles, debugging with GDB/LLDB  
1.4 Key Resources  
- Books: “Competitive Programming” (Halim & Halim), “CP-Handbook”  
- Online Judges: Codeforces, AtCoder, LeetCode, UVA, SPOJ  
- Communities: Codeforces groups, Discord servers, Reddit r/cp  



2. Core Programming Skills  
2.1 Fast I/O Techniques  
- 'scanf'/'printf', 'ios::sync_with_stdio(false)', buffered reading  
2.2 Language Idioms & STL  
- C++ Standard Library: 'vector', 'deque', 'set', 'map', 'unordered_map', 'priority_queue'  
- Iterators, lambdas, 'std::tie', structured bindings  
2.3 Debugging & Testing  
- Writing custom test harnesses  
- Sanitizers: AddressSanitizer, UndefinedBehaviorSanitizer  
- Logging macros and conditional debug prints  



3. Fundamental Data Structures  
3.1 Arrays & Strings  
- 2D arrays, prefix sums, two-pointer technique  
3.2 Linked Lists, Stacks & Queues  
- Simulating deques, monotonic queues  
3.3 Heaps & Priority Queues  
- Custom comparators, 'make_heap'/'push_heap'/'pop_heap'  
3.4 Hash Tables  
- Rolling hashes for strings, custom hash functions to avoid hacks  



4. Advanced Data Structures  
4.1 Trees & Binary Search Trees  
- Fenwick Tree (BIT): point update, prefix query  
- Segment Tree: range updates, range queries, lazy propagation  
4.2 Disjoint Set Union (Union-Find)  
- Union by rank, path compression  
- DSU with rollback (for offline queries)  
4.3 Balanced Trees & Heaps  
- Treaps, Splay Trees, PBDS  
4.4 Persistent Data Structures  
- Persistent segment tree, persistent union-find  
4.5 Specialized Structures  
- Link-Cut Trees, Euler Tour Trees  
- Range Minimum Query (Sparse Table)  



5. Algorithmic Paradigms  
5.1 Brute Force & Exhaustive Search  
- Backtracking, recursion limits, pruning  
5.2 Greedy Algorithms  
- Exchange arguments, matroid theory basics  
5.3 Divide & Conquer  
- Merge sort, divide-and-conquer DP  
5.4 Dynamic Programming (DP)  
- 1D/2D DP, knapsack variants, bitmask DP  
- DP on trees (tree DP), DP on graphs (DAG DP)  
- Optimization techniques: prefix/suffix optimizations, convex hull trick, Knuth optimization  
5.5 Two-Pointer & Sliding Window  
5.6 Meet-in-the-Middle & Inclusion-Exclusion  



6. Graph Algorithms  
6.1 Traversals  
- BFS, DFS, articulation points, bridges  
6.2 Shortest Paths  
- Dijkstra (with heap), Bellman-Ford, SPFA caveats  
- Multi-source, multi-criteria shortest paths  
6.3 Minimum Spanning Trees  
- Kruskal, Prim, Borůvka  
6.4 Maximum Flow & Min-Cut  
- Edmonds-Karp, Dinic’s algorithm, Push-Relabel  
6.5 Matching & Network Flow Applications  
- Bipartite matching (Hopcroft–Karp), max flow for assignment  
6.6 Advanced Graph Topics  
- 2-SAT via SCC, strongly connected components (Kosaraju, Tarjan)  
- Heavy-Light Decomposition, centroid decomposition  



7. String Algorithms  
7.1 Pattern Searching  
- KMP, Z-algorithm, Rabin–Karp  
7.2 Suffix Structures  
- Suffix Array & LCP, suffix automaton, suffix tree basics  
7.3 Trie & Aho–Corasick Automaton  
7.4 Palindrome Algorithms  
- Manacher’s algorithm, Palindromic Tree (Eertree)  



8. Computational Geometry  
8.1 Basic Primitives  
- Points, vectors, cross/dot product, orientation tests  
8.2 Convex Hull  
- Graham scan, Andrew’s monotone chain  
8.3 Line & Segment Intersection  
8.4 Polygon Operations  
- Area, winding number, point-in-polygon  
8.5 Advanced Topics  
- Closest pair, rotating calipers, Voronoi & Delaunay basics  



9. Number Theory & Combinatorics  
9.1 Elementary Number Theory  
- GCD/LCM, extended Euclid, modular arithmetic  
9.2 Prime Sieves & Factorization  
- Sieve of Eratosthenes, segmented sieve, Pollard’s rho  
9.3 Modular Exponentiation & Inversion  
- Fermat’s little theorem, CRT (Chinese remainder theorem)  
9.4 Combinatorics  
- Factorials, inverse factorials, nCr modulo, Lucas’s theorem  
- Inclusion-exclusion, combinatorial identities  
9.5 Advanced Math  
- FFT/NTT for polynomial multiplication  
- Primitive roots, discrete logarithms (baby-step giant-step)  



10. Contest Strategies & Practice  
10.1 Problem Classification & Tagging  
- Quickly identifying problem type: DP, graph, math, geometry  
10.2 Time Management  
- Problem selection heuristics, per-problem time budgets  
10.3 Virtual Contests & Performance Analysis  
- Codeforces gym, AtCoder virtual contests  
- Post-contest analysis and editorial walkthroughs  
10.4 Team Contests & Collaboration  
- ICPC-style teamwork, roles (coder, tester, problem manager)  
10.5 Common Pitfalls & Debugging Under Pressure  
- Off-by-one, integer overflow, precision errors  



11. Tools, Templates & Libraries  
11.1 Code Templates & Snippets  
- Fast I/O setup, data structure skeletons  
11.2 Competitive Programming Libraries  
- KACTL, personal template libraries  
11.3 Automated Testing  
- Local file-based testing, stress testing with random generators  
11.4 Continuous Integration  
- GitHub Actions for auto-testing on push  



12. Performance Analysis & Optimization  
12.1 Complexity Analysis  
- Time vs. memory trade-offs, amortized analysis  
12.2 Low-Level Optimizations  
- Bitwise tricks, loop unrolling, branch prediction hints  
12.3 Memory Management  
- Avoiding recursion limits, careful use of STL allocators  



13. Advanced Topics & Research Directions  
13.1 Mo’s Algorithm & Offline Queries  
13.2 Tree & Graph Decomposition Techniques  
13.3 Data Structure Beats & Advanced Segment Trees  
13.4 Hybrid Algorithms & Heuristics  
13.5 Open Problems & Competitive Research  



14. Interview Preparation & Transition  
14.1 Mapping CP Skills to Interviews  
- Translating contest solutions to clear, maintainable code  
14.2 System Design Lite  
- Applying algorithmic thinking to large-scale problems  
14.3 Behavioral & Communication Skills  
- Explaining your approach, handling follow-up questions  
14.4 Mock Interviews & Platforms  
- Pramp, InterviewBit, LeetCode interview mode  



15. Capstone Projects & Mentorship  
- Project 1: Build a personal CP library with full test suite  
- Project 2: Host and run a virtual contest for peers  
- Project 3: Write blog posts/tutorials on advanced topics  
- Project 4: Mentor beginners and conduct code reviews  



16. Course Wrap-Up & Next Steps  
- Recap of key strategies, data structures, and algorithms  
- Creating a lifelong learning plan: contest calendars, research  
- Contributing to the CP community: editors, problem setters  
- Career pathways: competitive coder, algorithm engineer, SRE  



This comprehensive roadmap ensures you master every nook and corner of competitive programming—preparing you for top contests, technical interviews, and algorithmic innovation.