

What is a QuerySet in Django and how is it used?
In Django, a QuerySet represents a collection of database queries that can be chained and lazily executed. It provides an intuitive way to retrieve and manipulate data from the database using Python.


QuerySet Basics:
----------------
Initializationic: QuerySets are generated automatically when you interact with a Django model using its Manager.
Chaining: Multiple methods can be chained together before the QuerySet is evaluated.
Lazy Evaluation: QuerySets are only executed when data is required, such as when iterating through the results or explicitly calling evaluation methods like list() or count().
Immutability After Evaluation: Once a QuerySet is evaluated, its results cannot be altered. For instance, you can't add more items to a list after it's been created.



QuerySet Methods:
-----------------
Data Retrieval
all(): Returns all objects in the QuerySet.
get(): Retrieves a single object that matches the provided criteria.
filter(): Returns a subset of objects that match specific criteria.
exclude(): Returns objects that don't match the specified criteria.

Data Manipulation
create(): Instantly creates a new object and saves it to the database.
update(): Modifies objects in the database that match the given criteria.

Relationship Handling
select_related(): Fetches related Many-To-One objects. Efficient for queries with a small number of related objects.
prefetch_related(): Fetches the related objects for a Many-To-Many or reverse ForeignKey relationship.

QuerySet Execution
iterator(): Fetches objects from the database one at a time, useful for large result sets.
get_or_create(): Attempts to fetch an object from the database based on certain criteria and creates it if it doesn't exist.
earliest() and latest(): Retrieve the first and last object, respectively, based on the specified field.

Aggregation and Metrics
aggregate(): Performs an aggregate function (e.g., Count, Sum, Avg) over the items in the QuerySet.
count(): Returns the number of items in the QuerySet.

QuerySet Evaluation
bool(): Returns True if the QuerySet contains any results, False otherwise.
exists(): Checks if there are any results that match the query.

QuerySet Execution
order_by(): Orders the QuerySet results based on the specified field.
reverse(): Reverses the original ordering of the QuerySet.

Slicing and Pagination
iterator(): Fetches objects from the database one at a time, useful for large result sets.
first() and last(): Retrieve the first or last object from the QuerySet.
count(): Returns the number of items in the QuerySet.

QuerySet Convenience Methods
in_bulk(): Returns a dictionary of objects with their primary keys as the keys.
values() and values_list(): Return dictionaries or tuples, respectively, representing the objects' fields.
distinct(): Removes duplicate results from the QuerySet.
union(): Combines two or more QuerySets into a single, unique QuerySet.



(More to work on querysets)