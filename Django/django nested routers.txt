
Understanding Nested Routers in Django REST Framework:
------------------------------------------------------
Nested routers in Django REST Framework (DRF) allow you to create hierarchical URL structures for APIs. This is particularly useful when you have resources that are related to each other, such as a parent-child relationship (e.g., products and their reviews, carts and their items).

The 'drf-nested-routers' package, available at [drf-nested-routers](https://github.com/alanjds/drf-nested-routers), extends DRF's default router system to support nested routes.



What Are Nested Routers?

In a REST API, nested routers allow you to define URLs that reflect the relationships between resources. For example:
- A product can have multiple reviews.
- A cart can have multiple items.

With nested routers, you can create URLs like:
- '/products/{product_id}/reviews/'
- '/carts/{cart_id}/items/'

This structure makes it clear that reviews belong to a specific product and items belong to a specific cart.



How Nested Routers Work:
The 'drf-nested-routers' package provides the 'NestedDefaultRouter' class, which allows you to define nested routes. A parent router defines the base resource (e.g., 'products'), and a nested router defines the child resource (e.g., 'reviews').


Example 1: Products and Reviews

Step 1: Define ViewSets
Create two viewsets: one for 'Product' and one for 'Review'.

from rest_framework.viewsets import ModelViewSet
from .models import Product, Review
from .serializers import ProductSerializer, ReviewSerializer

class ProductViewSet(ModelViewSet):
    queryset = Product.objects.all()
    serializer_class = ProductSerializer

class ReviewViewSet(ModelViewSet):
    queryset = Review.objects.all()
    serializer_class = ReviewSerializer
	



Step 2: Define Routers
Use 'DefaultRouter' for the parent resource ('products') and 'NestedDefaultRouter' for the child resource ('reviews').


from rest_framework_nested import routers
from . import views

# Parent router
router = routers.DefaultRouter()
router.register('products', views.ProductViewSet, basename='products')

# Nested router for reviews
products_router = routers.NestedDefaultRouter(router, 'products', lookup='product')
products_router.register('reviews', views.ReviewViewSet, basename='product-reviews')

# URLConf
urlpatterns = router.urls + products_router.urls


# Generated URLs
The above code generates the following URLs:

1. Parent Resource (Products):
   - 'GET /products/' - List all products.
   - 'POST /products/' - Create a new product.
   - 'GET /products/{product_id}/' - Retrieve a specific product.
   - 'PUT /products/{product_id}/' - Update a specific product.
   - 'DELETE /products/{product_id}/' - Delete a specific product.

2. Child Resource (Reviews):
   - 'GET /products/{product_id}/reviews/' - List all reviews for a specific product.
   - 'POST /products/{product_id}/reviews/' - Create a new review for a specific product.
   - 'GET /products/{product_id}/reviews/{review_id}/' - Retrieve a specific review.
   - 'PUT /products/{product_id}/reviews/{review_id}/' - Update a specific review.
   - 'DELETE /products/{product_id}/reviews/{review_id}/' - Delete a specific review.




Example 2: Carts and Items

# Step 1: Define ViewSets
Create two viewsets: one for 'Cart' and one for 'CartItem'.

from rest_framework.viewsets import ModelViewSet
from .models import Cart, CartItem
from .serializers import CartSerializer, CartItemSerializer

class CartViewSet(ModelViewSet):
    queryset = Cart.objects.all()
    serializer_class = CartSerializer

class CartItemViewSet(ModelViewSet):
    queryset = CartItem.objects.all()
    serializer_class = CartItemSerializer
	

# Step 2: Define Routers
Use 'DefaultRouter' for the parent resource ('carts') and 'NestedDefaultRouter' for the child resource ('items').


from rest_framework_nested import routers
from . import views

# Parent router
router = routers.DefaultRouter()
router.register('carts', views.CartViewSet, basename='carts')

# Nested router for cart items
carts_router = routers.NestedDefaultRouter(router, 'carts', lookup='cart')
carts_router.register('items', views.CartItemViewSet, basename='cart-items')

# URLConf
urlpatterns = router.urls + carts_router.urls


# Generated URLs
The above code generates the following URLs:

1. Parent Resource (Carts):
   - 'GET /carts/' - List all carts.
   - 'POST /carts/' - Create a new cart.
   - 'GET /carts/{cart_id}/' - Retrieve a specific cart.
   - 'PUT /carts/{cart_id}/' - Update a specific cart.
   - 'DELETE /carts/{cart_id}/' - Delete a specific cart.

2. Child Resource (Cart Items):
   - 'GET /carts/{cart_id}/items/' - List all items in a specific cart.
   - 'POST /carts/{cart_id}/items/' - Add a new item to a specific cart.
   - 'GET /carts/{cart_id}/items/{item_id}/' - Retrieve a specific item in a cart.
   - 'PUT /carts/{cart_id}/items/{item_id}/' - Update a specific item in a cart.
   - 'DELETE /carts/{cart_id}/items/{item_id}/' - Remove a specific item from a cart.



How 'lookup' Works in Nested Routers:

The 'lookup' argument in 'NestedDefaultRouter' specifies the name of the parent resource's identifier. For example:

products_router = routers.NestedDefaultRouter(router, 'products', lookup='product')

- lookup='product' means that the parent resource's identifier will be available as 'product_id' in the child viewset.
- In the child viewset ('ReviewViewSet'), you can access the parent resource's ID using 'self.kwargs['product_id']'.



Accessing Parent Resource in Child ViewSet:

If you need to filter child resources based on the parent resource, you can use the 'kwargs' dictionary in the child viewset.


class ReviewViewSet(ModelViewSet):
    serializer_class = ReviewSerializer

    def get_queryset(self):
        # Filter reviews by the parent product
        product_id = self.kwargs['product_id']
        return Review.objects.filter(product_id=product_id)




Example 3: Combining Multiple Nested Routers

You can combine multiple nested routers to create complex hierarchies. For example:

from rest_framework_nested import routers
from . import views

# Parent router
router = routers.DefaultRouter()
router.register('products', views.ProductViewSet, basename='products')

# Nested router for reviews
products_router = routers.NestedDefaultRouter(router, 'products', lookup='product')
products_router.register('reviews', views.ReviewViewSet, basename='product-reviews')

# Nested router for cart items
router.register('carts', views.CartViewSet, basename='carts')
carts_router = routers.NestedDefaultRouter(router, 'carts', lookup='cart')
carts_router.register('items', views.CartItemViewSet, basename='cart-items')

# URLConf
urlpatterns = router.urls + products_router.urls + carts_router.urls


This generates URLs for both 'products' and 'carts', along with their nested resources.



Summary
- Nested routers in DRF allow you to create hierarchical URL structures that reflect parent-child relationships between resources.
- The 'drf-nested-routers' package provides the 'NestedDefaultRouter' class to define these relationships.
- Use 'lookup' to specify the parent resource's identifier, and access it in the child viewset using 'self.kwargs'.
- Nested routers make APIs more intuitive and easier to navigate, especially when dealing with related resources.


---------------------------------------------------------------------------------------------------------------------------------------------------------------------


Question: 
I don't understand the 'basename' parameter in the parent router. Then 'lookup' and ' basename' again in the child router. Explain all these things clearly with example.


Answer: 
Let’s break down the concepts of 'basename' and 'lookup' in Django REST Framework (DRF) routers, especially in the context of nested routers.

1. What is 'basename' in DRF Routers?

The 'basename' parameter in DRF routers is used to name the URL patterns generated by the router. It is particularly useful when the 'queryset' or 'viewset' does not have a 'queryset' attribute or when you want to customize the name of the URL patterns.

How 'basename' Works
- If you don’t provide a 'basename', DRF will try to infer it from the 'queryset' attribute of the viewset.
- If the 'queryset' is not defined, you must provide a 'basename', or DRF will raise an error.


Example:
router.register('products', views.ProductViewSet, basename='products')

- Here, 'basename='products' is used to name the URL patterns for the 'ProductViewSet'.
- The generated URL names will look like:
  - 'products-list' for the list view ('GET /products/')
  - 'products-detail' for the detail view ('GET /products/{id}/')

If you omit 'basename' and the 'ProductViewSet' has a 'queryset' defined, DRF will automatically use the model name (e.g., 'Product') as the basename.





2. What is 'lookup' in Nested Routers?

The 'lookup' parameter in nested routers specifies the name of the parent resource's identifier in the URL. This identifier is passed to the child viewset as a keyword argument ('kwargs').

How 'lookup' Works:
- The 'lookup' value is used to generate the URL parameter for the parent resource.
- By default, the 'lookup' value is 'pk' (primary key), but you can customize it.

Example:
products_router = routers.NestedDefaultRouter(router, 'products', lookup='product')

- Here, lookup='product' means the parent resource's identifier will be named 'product_id' in the URL.
- The generated URLs will look like:
  - '/products/{product_id}/reviews/' for the list of reviews.
  - '/products/{product_id}/reviews/{review_id}/' for a specific review.

In the child viewset ('ReviewViewSet'), you can access the parent resource's ID using 'self.kwargs['product_id']'.




3. Combining 'basename' and 'lookup' in Nested Routers

When defining a nested router, you use both 'basename' and 'lookup' to:
1. 'basename': Name the URL patterns for the child resource.
2. 'lookup': Specify the parent resource's identifier.

Example from Your Code
products_router = routers.NestedDefaultRouter(router, 'products', lookup='product')
products_router.register('reviews', views.ReviewViewSet, basename='product-reviews')


- 'lookup='product'':
  - The parent resource's identifier will be named 'product_id' in the URL.
  - URLs will look like:
    - '/products/{product_id}/reviews/'
    - '/products/{product_id}/reviews/{review_id}/'

- 'basename='product-reviews'':
  - The URL patterns for the 'ReviewViewSet' will be named:
    - 'product-reviews-list' for the list view ('GET /products/{product_id}/reviews/')
    - 'product-reviews-detail' for the detail view ('GET /products/{product_id}/reviews/{review_id}/')



4. Detailed Example
Let’s create a full example to clarify how 'basename' and 'lookup' work.

Models:
from django.db import models

class Product(models.Model):
    name = models.CharField(max_length=255)

class Review(models.Model):
    product = models.ForeignKey(Product, on_delete=models.CASCADE, related_name='reviews')
    content = models.TextField()


ViewSets:
from rest_framework.viewsets import ModelViewSet
from .models import Product, Review
from .serializers import ProductSerializer, ReviewSerializer

class ProductViewSet(ModelViewSet):
    queryset = Product.objects.all()
    serializer_class = ProductSerializer

class ReviewViewSet(ModelViewSet):
    serializer_class = ReviewSerializer

    def get_queryset(self):
         Filter reviews by the parent product
        product_id = self.kwargs['product_id']
        return Review.objects.filter(product_id=product_id)


Routers
from rest_framework_nested import routers
from . import views

# Parent router
router = routers.DefaultRouter()
router.register('products', views.ProductViewSet, basename='products')

# Nested router for reviews
products_router = routers.NestedDefaultRouter(router, 'products', lookup='product')
products_router.register('reviews', views.ReviewViewSet, basename='product-reviews')

# URLConf
urlpatterns = router.urls + products_router.urls


Generated URLs:
1. Parent Resource (Products):
   - 'GET /products/' - List all products.
   - 'POST /products/' - Create a new product.
   - 'GET /products/{product_id}/' - Retrieve a specific product.
   - 'PUT /products/{product_id}/' - Update a specific product.
   - 'DELETE /products/{product_id}/' - Delete a specific product.

2. Child Resource (Reviews):
   - 'GET /products/{product_id}/reviews/' - List all reviews for a specific product.
   - 'POST /products/{product_id}/reviews/' - Create a new review for a specific product.
   - 'GET /products/{product_id}/reviews/{review_id}/' - Retrieve a specific review.
   - 'PUT /products/{product_id}/reviews/{review_id}/' - Update a specific review.
   - 'DELETE /products/{product_id}/reviews/{review_id}/' - Delete a specific review.



5. Accessing Parent Resource in Child ViewSet

In the child viewset ('ReviewViewSet'), you can access the parent resource's ID using 'self.kwargs'.

Example:
class ReviewViewSet(ModelViewSet):
    serializer_class = ReviewSerializer

    def get_queryset(self):
         Access the parent product's ID from the URL
        product_id = self.kwargs['product_id']
        return Review.objects.filter(product_id=product_id)


If you access '/products/1/reviews/', 'self.kwargs['product_id']' will be '1'.





6. Summary of Key Points

| Parameter      | Purpose                                    | Example
|-------------------------------------------------------------------------------------------------------------------------------------------------------------------
| 'basename'     | Names the URL patterns for the viewset.    | basename='products' generates names like 'products-list' and 'products-detail'.             |                |                                            |
| 'lookup'       | Specifies the name of the parent           |
|                | resource's identifier in the URL.          | lookup='product' generates URLs like '/products/{product_id}/reviews/'.        
             |

By combining 'basename' and 'lookup', you can create clear, hierarchical URL structures that reflect the relationships between resources.