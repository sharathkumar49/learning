
                                            List-Based Programs
											====================
1.Find the second largest num in the list
=========================================

Using sort method  -> Changes the original list
------------------
num = [1,4,6,73,2,10,66,7,8]

new_list = num.sort(reverse=True)

print(num[1])

Using Sorted method -> returns new sorted list and original remains same
--------------------
num = [1,4,6,73,2,10,66,7,8]

new_list = sorted(num, reverse = True)

print(new_list[1])

===================================================================================================================================================================================================================================
2.Without any method using quick sort
=====================================
def quick_sort(num):
    if len(num) <= 1:
        return num
    pivot = num[(len(num)//2)]
    left_val = [x for x in num if x < pivot]
    mid_val = [x for x in num if x == pivot]
    right_val = [x for x in num if x>pivot]
    
    return quick_sort(left_val) + mid_val + quick_sort(right_val)
    
sorted_list = quick_sort([1,4,6,73,2,10,66,7,8])
print(f"sorted list:{sorted_list}")
print(f"second largest number is:{sorted_list[-2]}")


OUTPUT
-------
sorted list:[1, 2, 4, 6, 7, 8, 10, 66, 73]
second largest number is:66

===================================================================================================================================================================================================================================
3.Find the largest and smallest elements in a list.
====================================================
num = [1,4,6,73,2,10,66,7,8]

largest = num[0]
smallest = num[0]

for i in num:
    if i > largest:
        largest = i
    if i < smallest:
        smallest = i
        
print(f"largest number is: {largest}")
print(f"smallest number is: {smallest}")

===================================================================================================================================================================================================================================
4.Sort a list in ascending and descending order.
================================================
num = [1,4,6,73,2,10,66,7,8]

def quick_sort(num):
    if len(num) <= 1:
        return num
    pivot = num[(len(num)//2)]
    left_val = [x for x in num if x < pivot]
    mid_val = [x for x in num if x== pivot]
    right_val = [x for x in num if x>pivot]
    
    return quick_sort(left_val) + mid_val + quick_sort(right_val)
    
sorted_list = quick_sort([1,4,6,73,2,10,66,7,8])
print(f"sorted list in ascending order:{sorted_list}")
print(f"sorted list in descending order:{sorted_list[::-1]}")

===================================================================================================================================================================================================================================
5.Merge two sorted lists
========================

list1 = [2,4,6,8]
list2 = [1,3,5,7,9,11]
def merge_sort(list1,list2):
    result = []
    i,j=0,0
    while i<len(list1) and j<len(list2):
        if list1[i] < list2[j]:
            result.append(list1[i])
            i += 1
        else:
            result.append(list2[j])
            j += 1
    
    while i<len(list1):
            result.append(list1[i])
            i += 1
    
    while j<len(list2):
            result.append(list2[j])
            j += 1
            
    return result

merged_list = merge_sort(list1,list2)
print(merged_list)
            
			
OUTPUT    -> [1, 2, 3, 4, 5, 6, 7, 8, 9, 11]
-------

=====================================================================================================================================================================
6.Remove duplicates from a list.
================================
list1 = [2,4,6,8,4,3,1,2,10,9,6,2]

def duplicate(num):
    result = []
    for i in num:
        if i not in result:
            result.append(i)
    return result

org_list = duplicate(list1)
print(org_list)

=====================================================================================================================================================================
7.Find the frequency of elements in a list.
==========================================
list1 = [2,4,6,8,4,3,1,2,10,9,6,2]


def frequency(num):
    freq={}
    for i in num:
        if i not in freq:
            freq[i] = 1
        else:
            freq[i] += 1
    return freq
    
freq_char = frequency(list1)
print(freq_char)

OUTPUT -> {2: 3, 4: 2, 6: 2, 8: 1, 3: 1, 1: 1, 10: 1, 9: 1}

USING LIST
===========

list1 = [2,4,6,8,4,3,1,2,10,9,6,2]

def frequency(num):
    freq=[]
    for i in num:
        found = False
        for j in freq:
            if j[0] == i:
                j[1] += 1
                found = True
                break
            
        if not found:
            freq.append([i,1])
            
    return freq
    
freq_char = frequency(list1)
print(freq_char)

            
OUTPUT -> [[2, 3], [4, 2], [6, 2], [8, 1], [3, 1], [1, 1], [10, 1], [9, 1]]

===================================================================================================================================================================================================================================
8.Check if a list is a palindrome.
=================================
list1 = [2,4,6,4,2]

def palindrome(list1):
    if list1 == list1[::-1]:
        return f"given list is palindrome:{list1}"
    else:
        return None

check = palindrome(list1)
print(check)

OUTPUT -> given list is palindrome:[2, 4, 6, 4, 2]

def palindrome(num):
    for i in range(len(num)//2):
        if num[i] != num[(len(num) - 1 - i)]:
            return False
    return True

print(palindrome([2,4,6,4,2]))
print(palindrome([2,4,6,5,4,2]))

OUTPUT -> True
          False
		  

num = [[2,3],[[4,5,6]],8,[9,10]]


n =1221

original = n
reverse = 0
while n > 0:
    digit = n % 10
    reverse = reverse * 10 + digit
    n = n//10

if original == reverse:
    print("Palindrome")
else:
    print("Not a palindrome")
	
===================================================================================================================================================================================================================================
9.Flatten a nested list
======================
def flatten_list(num):
    result = []
    for item in num:
        if isinstance(item,list):
            result.extend(flatten_list(item))
        else:
            result.append(item)
    return result
 
print(flatten_list(num))

WITHOUT RECURSIVE FUNCTION
---------------------------
num = [[2,3],[[4,5,6]],8,[9,10]]

def flatten(num):
    result = []
    stack = [num]
    
    while stack:
        current = stack.pop()
        if isinstance(current,list):
            stack.extend(reversed(current))
        else:
            result.append(current)
    return result

print(flatten(num))

Flatten a tuples
=================
def flatten(num1):
    new_lst = []
    for i in num1:
        if isinstance(i,tuple):
            new_lst.extend(flatten(list(i)))
        elif  isinstance(i,list):
            new_lst.extend(flatten(i))
        else:
            new_lst.append(i)
    return tuple(new_lst)
    
num1 = ((2,3,4),6,[4,5],"list",[[8,9]])
print(flatten(num1))

OUTPUT -> (2, 3, 4, 6, 4, 5, 'list', 8, 9)


List Comprehension
===================
def flatten(num):
    return [i for item in num for i in (flatten(item) if isinstance(item,list) else [item])]
print(flatten(num))

===================================================================================================================================================================================================================================
10.Find the intersection of two lists.
=======================================
lst1 = [1,2,3,4,5]
lst2 = [1,4,6,7,2]

result=[]
def intersection(lst1,lst2):
    for i in lst1:
        for j in lst2:
            if i == j:
                result.append(i)
    return result

print(intersection(lst1,lst2))

OUTPUT -> [1, 2, 4]


Find the union of two lists
============================
lst1 = [1,2,3,4,5]
lst2 = [1,4,6,7,2]

for ele in lst2:
    if ele not in lst1:
        lst1.append(ele)

print(lst1) 


OUTPUT -> [1, 2, 3, 4, 5, 6, 7]

===================================================================================================================================================================================================================================
11.Split a list into chunks of a given size
============================================
lst = [1,2,3,4,5,6,7,8,9]

def chunk_list(lst,chunksize):
    return [lst[i:i+chunksize] for i in range(0,len(lst),chunksize)]
    
print(chunk_list(lst,4))

OUTPUT -> [[1, 2, 3, 4], [5, 6, 7, 8], [9]]

===================================================================================================================================================================================================================================

12.Find the cumulative sum of a list.
====================================
lst = [1,2,3,4,5,6,7,8,9]

def sum_list(lst):
    rslt = []
    total = 0
    for i in lst:  
        total += i
        rslt.append(total)
    return rslt    
        
print(sum_list(lst))

OUTPUT -> [1, 3, 6, 10, 15, 21, 28, 36, 45]

OR

lst = [1,2,3,4,5,6,7,8,9]

from itertools import accumulate

cumulative_sum = list(accumulate(lst))
print(cumulative_sum)

OUTPUT -> [1, 3, 6, 10, 15, 21, 28, 36, 45]

===================================================================================================================================================================================================================================

13.Remove all occurrences of a specific element from a list
============================================================
lst = [1,2,3,4,5,6,7,8,9,2,4,5,1,9,7,1,3,4,2]

def remove_occ(lst ,num):
    for i in lst:
        if i == num:
            lst.remove(i)
    return lst
        
print(remove_occ(lst,1))

===================================================================================================================================================================================================================================

14.Find the product of all elements in a list
==============================================
lst = [1,2,3,4,5,6,7,8,9]

def product(lst):
    total =1
    for i in lst:
        total *= i
    return total

print(product(lst))

===================================================================================================================================================================================================================================

15.Find the common elements in multiple lists
==============================================
lst1 = [1,2,3,4,7,6]
lst2 = [9,5,6,2,1,10,11,3]

def common_ele(*args):
    rslt = []
    for i in lst1:
        for j in lst2:
            if i == j:
                rslt.append(i)
    return rslt
    
print(common_ele(lst1,lst2))

OUTPUT -> [1, 2, 3, 6]

===================================================================================================================================================================================================================================

16.Find the difference between two lists
=========================================
lst1 = [1,2,3,4,7,6]
lst2 = [9,5,6,2,1,10,11,3]

def diff(lst1,lst2):
    rslt =[]
    for i in lst1:
        if i not in lst2:
            rslt.append(i)
    return rslt

print(diff(lst1,lst2))

===================================================================================================================================================================================================================================

17.Fibonacci series
====================
def fibonacci(n):
    if n<=0:
        return 0
    elif n ==1:
        return 1
    else:
        return fibonacci(n-1) + fibonacci(n-2)
    
rslt = fibonacci(9)
print(rslt)

OR

def fibonacci(n):
    a,b = 0,1
    for _ in range(n):
        print(a, end=" ")
        a,b = b,a+b
    
fibonacci(12)
===================================================================================================================================================================================================================================
                                                                       ====================
                                                                        Dictionary Programs
																	   =====================
18.Serialize and deserialize string
====================================
import pickle

data = {'viji':25,"john":20,"steve":27}

serialize_str = pickle.dumps(data)

print(serialize_str)


deserialize_str = pickle.loads(serialize_str)

print(deserialize_str)

===================================================================================================================================================================================================================================

19.Merge two dictionaries.
===========================
d1 = {'name':"viji","age":25}
d2 = {"nae":"sharath", "age":27}

d1.update(d2)

print(d1)

===================================================================================================================================================================================================================================

20.Sort a dictionary by keys or values
=======================================
my_dict = {'apple': 3, 'banana': 1, 'cherry': 5, 'date': 2}

#Sorted by keys
sorted_dict = dict(sorted(my_dict.items()))
print(sorted_dict)

#Sorted by values
sorted_dict = dict(sorted(my_dict.items(), key=lambda item:item[1]))
print(sorted_dict)

===================================================================================================================================================================================================================================

21.Count the frequency of characters in a string using a dictionary.
=====================================================================
string = "abracadabra"

freq = {}
for i in string:
    if i in freq:
        freq[i] +=1
    else:
        freq[i] = 1
    
print(freq)

freq = {char: sum(1 for i in string if i == char) for char in string}
print(freq)

===================================================================================================================================================================================================================================

22.Group elements of a list based on a condition using a dictionary.
====================================================================
input = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

words = ["apple", "banana", "apricot", "blueberry", "cherry"]

grouped_dict = {"even":[],"odd":[]}

for i in input:
    if i %2 == 0:
        grouped_dict["even"].append(i)
    else:
        grouped_dict["odd"].append(i)
        
print(grouped_dict)

grouped_str = {}

for i in words:
    key = i[0]
    if key in grouped_str:
        grouped_str[key].append(i)
    else:
        grouped_str[key] = [i]
    
print(grouped_str)

===================================================================================================================================================================================================================================

23.Convert a dictionary to a list of tuples and vice versa.
===========================================================
my_dict = {'apple': 3, 'banana': 1, 'cherry': 5, 'date': 2}

print(list(my_dict.items()))

print(dict(my_dict))

===================================================================================================================================================================================================================================

24.Check if a key exists in a dictionary
=========================================
my_dict = {'apple': 3, 'banana': 1, 'cherry': 5, 'date': 2}

key = "apple"
if key in my_dict:
        print("exists")
else:
        print("Not exists")
		
===================================================================================================================================================================================================================================
	
25.Remove a key-value pair from a dictionary.
============================================
my_dict = {'apple': 3, 'banana': 1, 'cherry': 5, 'date': 2}

to_remove ="cherry"

#del my_dict["cherry"]
#print(my_dict)

for i in list(my_dict.keys()):
    if i == to_remove:
        my_dict.pop(i)
print(my_dict)

===================================================================================================================================================================================================================================

26.Find the sum of all values in a dictionary
==============================================
my_dict = {'apple': 3, 'banana': 1, 'cherry': 5, 'date': 2}

total = 0
for i in list(my_dict.values()):
    total = total + i

print(total)

===================================================================================================================================================================================================================================

27.Invert a dictionary (swap keys and values)
==============================================
my_dict = {'apple': 3, 'banana': 1, 'cherry': 5, 'date': 2}

rslt = dict(zip(my_dict.values(),my_dict.keys()))
print(rslt)

===================================================================================================================================================================================================================================

28.Find the intersection of two dictionaries.
=============================================
dict1 = {'a': 1, 'b': 2, 'c': 3}
dict2 = {'b': 2, 'c': 4, 'd': 5}

rslt = {}
for i in dict1.items():
    for j in dict2.items():
        if i == j:
            rslt.update({i[0]:j[1]})
print(rslt)


Dictionary comprehension
--------------------------
rslt = {k:v for k,v in dict1.items() if k in dict2 and dict1[k] == dict2[k]}
print(rslt)

O/P -> {'b': 2}

===================================================================================================================================================================================================================================

29.Find the difference between two dictionaries
================================================
dict1 = {'a': 1, 'b': 2, 'c': 3}
dict2 = {'b': 2, 'c': 4, 'd': 5}


rslt1= {k:v for k,v in dict1.items() if k not in dict2}

rslt2 = {k:v for k,v in dict2.items() if k not in dict1}

comb = {k: (dict1[k],dict2[k]) for k in dict2 if k in dict1 and dict1[k] != dict2[k]}

rslt = {**rslt1,**rslt2,**comb}
print(rslt)


Create a nested dictionary
===========================
student = { 
    "viji" : {"age":25,"course":["bio","csc"]},
    "sharath" : {"age" :27, "course":["csc","mat"]}
    }
    
print(student["viji"]["age"])

===================================================================================================================================================================================================================================

30.Find the common keys in multiple dictionaries
=================================================
dict1 = {'a': 1, 'b': 2, 'c': 3}
dict2 = {'b': 2, 'c': 4, 'd': 5}
dict3 = {'c': 7, 'd': 8, 'e': 9}

common_keys = set(dict1.keys()) & set(dict2.keys()) & set(dict3.keys())
print(common_keys)

===================================================================================================================================================================================================================================

31. Find the key with the minimum value in a dictionary.
=========================================================
dict2 = {'b': 2, 'c': 9, 'd': 1}

if dict2:
    min_key = min(dict2 , key=dict2.get)
    print(min_key)

O/P -> d

===================================================================================================================================================================================================================================

32.Filter a dictionary based on a condition
============================================
my_dict = {'apple': 5, 'banana': 2, 'cherry': 8, 'date': 3}

for k,v in my_dict.items():
    if v>3:
        print({k:v})
        
Dictionary comprehension
-------------------------
filtered_dict = {k:v for k,v in my_dict.items() if v>3}
print(filtered_dict)


O/P -> 
{'apple': 5}
{'cherry': 8}
{'apple': 5, 'cherry': 8}

===================================================================================================================================================================================================================================

33.Convert a list of dictionaries into a single dictionary
===========================================================
list_of_dicts = [
    {'a': 1, 'b': 2},
    {'c': 3, 'd': 4},
    {'e': 5, 'f': 6}
]

new_dict = {}
for i in list_of_dicts:
    new_dict.update(i)

print(new_dict)

O/P -> {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6}

===================================================================================================================================================================================================================================

34.Group a list of dictionaries by a specific key
==================================================

defaultdict(list) creates a dictionary where each new key will automatically have an empty list as its default value.

data = [
    {'name': 'Alice', 'department': 'HR'},
    {'name': 'Bob', 'department': 'IT'},
    {'name': 'Charlie', 'department': 'HR'},
    {'name': 'David', 'department': 'IT'},
    {'name': 'Eva', 'department': 'Finance'}
]

from collections import defaultdict

d1 = defaultdict(list)
for item in data:
    d1[item['department']].append(item)
    
print(dict(d1))
    
	
O/P -> 
{'HR': [{'name': 'Alice', 'department': 'HR'}, {'name': 'Charlie', 'department': 'HR'}], 
 'IT': [{'name': 'Bob', 'department': 'IT'}, {'name': 'David', 'department': 'IT'}], 
 'Finance': [{'name': 'Eva', 'department': 'Finance'}]}

===================================================================================================================================================================================================================================

35.Sort a list of dictionaries by a specific key. Using BUBBLE Sort
====================================================================
data = [
    {'name': 'Bob', 'age': 30},   25
    {'name': 'David', 'age': 28},  22
    {'name': 'Alice', 'age': 25},  28
    {'name': 'Charlie', 'age': 22} 30
]

def bubble_sort(data,key):
    n = len(data)
    for i in range(n):
        for j in range(0,n-i-1):
            if data[j][key] > data[j+1][key]:
                data[j],data[j+1] = data[j+1],data[j]
    return data

sorted_data = bubble_sort(data,'age')
print(sorted_data)

O/P ->

[{'name': 'Charlie', 'age': 22}, {'name': 'Alice', 'age': 25}, {'name': 'David', 'age': 28}, {'name': 'Bob', 'age': 30}]

===================================================================================================================================================================================================================================

36.Find the maximum and minimum values in a list of dictionaries
=================================================================
data = [
    {'name': 'Bob', 'age': 30},
    {'name': 'David', 'age': 28},
    {'name': 'Alice', 'age': 25},
    {'name': 'Charlie', 'age': 22}
]

max_val = data[0]
min_val = data[0]

for person in data:
    if person['age'] > max_val['age']:
        max_val = person
    if person['age'] < max_val['age']:
        min_val = person
        
print("Minimum value",min_val)
print("Maximum value",max_val)

O/P -> 
Minimum value {'name': 'Charlie', 'age': 22}
Maximum value {'name': 'Bob', 'age': 30}

===================================================================================================================================================================================================================================

37.Convert a dictionary of lists into a list of dictionaries
=============================================================
data = {
    'name': ['Alice', 'Bob', 'Charlie'],
    'age': [25, 30, 22],
    'city': ['New York', 'Los Angeles', 'Chicago']
}


rslt = [dict(zip(data.keys(),row)) for row in zip(*data.values())]
print(rslt)

O/P ->


data = [
    {'name': 'Alice', 'age': 25, 'city': 'New York'},
    {'name': 'Bob', 'age': 30, 'city': 'Los Angeles'},
    {'name': 'Charlie', 'age': 22, 'city': 'Chicago'}
]

===================================================================================================================================================================================================================================

38.Create a dictionary of lists from a list of dictionaries
============================================================
result = {}
for item in data:
    for key,val in item.items():
        result.setdefault(key,[]).append(val)
        
print(result)

O/P ->
{'name': ['Alice', 'Bob', 'Charlie'], 
 'age': [25, 30, 22], 
 'city': ['New York', 'Los Angeles', 'Chicago']}
 
===================================================================================================================================================================================================================================

39.Find the unique keys in a list of dictionaries
==================================================
data = [
    {'name': 'Alice', 'age': 25},
    {'name': 'Bob', 'city': 'New York'},
    {'age': 30, 'country': 'USA'}
]

unique_key = set()

for item in data:
    unique_key.update(item.keys())

print(unique_key)

O/P ->
{'name', 'country', 'age', 'city'}

===================================================================================================================================================================================================================================

40.BINARY SEARCH
=================
arr = [2, 4, 6, 7, 9, 11, 15, 20]

def binary_search(arr,target):
    left,right = 0,len(arr)+1
    while left <= right:
        mid = (left+right)//2
        if arr[mid] == target:
            return mid
        elif arr[mid] < target:
            left = mid +1 
        elif arr[mid] > target:
            right = mid-1
    return -1
    
target = 6
find_val = binary_search(arr,target)
print(f"Target value {target} found at index: {find_val}")

O/P -> Target value 6 found at index: 2

===================================================================================================================================================================================================================================

41.Anagram
===========
s1 = "Listen"
s2 = "Silent"

def anagrams(s1,s2):
    s1 = s1.replace(" ", "").lower()

    s2 = s2.replace(" ", "").lower()
    
    s1 = list(s1)
    s2 = list(s2)

    if len(s1) != len(s2):
        return False
    
    for char in s1:
        if char in s2:
            s2.remove(char)
            
    return len(s2)  == 0

if anagrams(s1,s2):
    print("yes")
else:
    print("No")
	
===================================================================================================================================================================================================================================

42.Rotate the list
====================
def rotate_list(lst, k):
    k = k % len(lst)
    return lst[-k:] + lst[:-k]
OR  return lst[-k:] + lst[:n+1]

# Example usage
numbers = [1, 2, 3, 4, 5]
k = 2
print(rotate_list(numbers, k))  # Output: [4, 5, 1, 2, 3]

Rotate the string
==================
txt = "hello"
n=3
print(txt[-n:]+txt[:-n])

O/P -> llohe

===================================================================================================================================================================================================================================

43.Return All Number Pairs That Add to Target
==============================================
num = [3, 1, 4, 6, 2, 5]
target = 7

def two_nums(num,target):
    seen = set() 
    rslt = []  
    for num in num:
        complement = target - num
        if complement in seen:
            rslt.append((complement,num))
        seen.add(num)
    return rslt

print(two_nums(num,target))

OR:

nums = [2, 7, 11, 15]
target = 9

def sum_of_nums(nums,target):
    seen = {}
    
    for i,n in enumerate(nums):
        complement = target - n 
        if complement in seen:
            return [seen[complement],i]
        seen[n] = i
    return []

print(sum_of_nums(nums,target))

OUTPUT -> [0, 1]

===================================================================================================================================================================================================================================

44.Sum of digits of a number
=============================
n = 1234

def sum_digit(n):
    if n == 0:
        return 0
    else:
        return (n%10 + sum_digit(n//10))

print(sum_digit(n))

===================================================================================================================================================================================================================================

45.Explain how to implement a stack or queue in Python.
======================================================

STACK - LIFO (Last In First Out)
------
class Stack:
    def __init__(self):
        self.stack = []

    def push(self, item):
        """Push an item onto the stack."""
        self.stack.append(item)

    def pop(self):
        """Pop an item from the stack. Returns None if stack is empty."""
        if not self.is_empty():
            return self.stack.pop()
        else:
            print("Stack is empty!")
            return None

    def peek(self):
        """Return the top item without removing it."""
        if not self.is_empty():
            return self.stack[-1]
        else:
            print("Stack is empty!")
            return None

    def is_empty(self):
        """Check if the stack is empty."""
        return len(self.stack) == 0

    def size(self):
        """Return the size of the stack."""
        return len(self.stack)

# Example Usage
stack = Stack()
stack.push(10)
stack.push(20)
stack.push(30)

print(stack.pop())  # Output: 30
print(stack.peek())  # Output: 20
print(stack.size())  # Output: 2

QUEUE  - FIFO (First In First out)
------
class Queue:
    def __init__(self):
        self.queue = []

    def enqueue(self, item):
        """Add an item to the end of the queue."""
        self.queue.append(item)

    def dequeue(self):
        """Remove an item from the front of the queue. Returns None if empty."""
        if not self.is_empty():
            return self.queue.pop(0)
        else:
            print("Queue is empty!")
            return None

    def peek(self):
        """Return the front item without removing it."""
        if not self.is_empty():
            return self.queue[0]
        else:
            print("Queue is empty!")
            return None

    def is_empty(self):
        return len(self.queue) == 0

    def size(self):
        return len(self.queue)

# Example Usage
queue = Queue()
queue.enqueue(10)
queue.enqueue(20)
queue.enqueue(30)

print(queue.dequeue())  # Output: 10
print(queue.peek())     # Output: 20
print(queue.size())     # Output: 2

===================================================================================================================================================================================================================================

46. Find the number of digits in an integer
============================================
Input: 12345
Output: 5

SOL:
num = 12345

count = 0
while num !=0:
    num //= 10
    print(num)
    count += 1

print(count)

===================================================================================================================================================================================================================================

47.Create an iterator that returns numbers, starting with 1, and each sequence will increase by one (returning 1,2,3,4,5 etc.):
===============================================================================================================================

class MyNumbers:
  def __iter__(self):
    self.a = 1
    return self

  def __next__(self):
    x = self.a
    self.a += 1
    return x

myclass = MyNumbers()
myiter = iter(myclass)

print(next(myiter))
print(next(myiter))
print(next(myiter))
print(next(myiter))
print(next(myiter))



StopIteration
The example above would continue forever if you had enough next() statements, or if it was used in a for loop.

To prevent the iteration from going on forever, we can use the StopIteration statement.

In the __next__() method, we can add a terminating condition to raise an error if the iteration is done a specified number of times:

Example
Stop after 20 iterations:

class MyNumbers:
  def __iter__(self):
    self.a = 1
    return self

  def __next__(self):
    if self.a <= 20:
      x = self.a
      self.a += 1
      return x
    else:
      raise StopIteration

myclass = MyNumbers()
myiter = iter(myclass)

for x in myiter:
  print(x)
  
-----------------------------------------------------------------------------------

ITERATOR
=========
class customrange:
    def __init__(self,start,end):
        self.current = start
        self.end = end
    
    def __iter__(self):
        return self
    
    def __next__(self):
        if self.current < self.end:
            num = self.current
            self.current += 1
            return num
        else:
            raise StopIteration
    

for i in customrange(0,5):
    print(i)
    
try:
    itr = customrange(0,5)
    print(next(itr))
    print(next(itr))
    print(next(itr))
    print(next(itr))
    print(next(itr))
    print(next(itr))
except StopIteration:
    print("Exhausted")

OUTPUT
=======
0
1
2
3
4

0
1
2
3
4
Exhausted

	

GENERATOR
==========
def custom_range(start,end):
    while start < end:
        yield start
        start += 1

for i in custom_range(0,5):
    print(i)
    
gen = custom_range(0,5)
try:
    print(next(gen))
    print(next(gen))
    print(next(gen))
    print(next(gen))
    print(next(gen))
    print(next(gen))
    print(next(gen))
except StopIteration:
    print("Generator is exhausted.")
    
OUTPUT
=======
0
1
2
3
4

0
1
2
3
4
Generator is exhausted.

===================================================================================================================================================================================================================================

48. Find all digits in a string
================================
Input: "abc123def456"
Output: ['123', '456']

SOLUTION
=========
import re
txt = "abc123def456"
pattern = r"[0-9]{3,}"
rslt = re.findall(pattern,txt)
print(rslt)

OUTPUT
=======
['123', '456']

===================================================================================================================================================================================================================================

49. Extract all words starting with capital letters
====================================================
Input: "Alice and Bob are Friends"
Output: ['Alice', 'Bob', 'Friends']

SOLUTION
=========
import re

txt = "Alice and Bob are Friends"
pattern = r"[A-Z]+[a-z]*"
rslt = re.findall(pattern,txt)
print(rslt)

OUTPUT
=======
['Alice', 'Bob', 'Friends']

===================================================================================================================================================================================================================================

50. Replace all spaces with hyphens
===================================
Input: "Python is awesome"
Output: "Python-is-awesome"

SOLUTION
=========
import re

txt = "Python is awesome"
rslt = re.sub(r"\s","-",txt)
print(rslt)

OUTPUT    -> Python-is-awesome
=======

===================================================================================================================================================================================================================================

51. Validate an email address
==============================
Input: "user@example.com"
Output: True (if matched), or False (if not matched)

SOLUTION
=========
import re

txt = "user@example.com"
pattern = r"[a-z]+@[a-z]+\.[a-z]{3,}"

rslt = re.match(pattern,txt)
print(rslt)

if rslt:
    print("True")
else:
    print("False")
	
OUTPUT
=======
<re.Match object; span=(0, 16), match='user@example.com'>
True

===================================================================================================================================================================================================================================

52. Extract domain name from URL
=================================
Input: "https://www.example.com/path"
Output: "example.com"

SOLUTION
=========
import re

txt = "https://www.example.com/path"

pattern = r"[w]{3}\.[a-z]+\.[a-z]{3,}"

rslt = re.search(pattern,txt)
print(rslt)

print((rslt).group(0))


OUTPUT
=======
<re.Match object; span=(8, 23), match='www.example.com'>
print((rslt).group(0))

===================================================================================================================================================================================================================================

53. Find all phone numbers in a text
=====================================
Input: "Call me at 9876543210 or 1234567890"
Output: ['9876543210', '1234567890']

SOLUTION
=========
import re

txt = "Call me at 9876543210 or 1234567890"

pattern = r"[0-9]{10}"
rslt = re.findall(pattern,txt)
print(rslt)

OUTPUT    -> ['9876543210', '1234567890']
=======

===================================================================================================================================================================================================================================

54. Split a sentence into words using regex
===========================================
Input: "Hello, world! Python is great."
Output: ['Hello', 'world', 'Python', 'is', 'great']

SOLUTION
=========
import re

txt = "Hello, world! Python is great."

pattern = r"[A-Za-z]+"
rslt = re.findall(pattern,txt)
print(rslt)

OUTPUT   -> ['Hello', 'world', 'Python', 'is', 'great']
=======


===================================================================================================================================================================================================================================

55. Remove all non-alphanumeric characters
===========================================
Input: "Python@#3.9 is $cool!"
Output: "Python39iscool"

SOLUTION
=========
import re

txt = "Python@#3.9 is $cool!"

pattern = r"[^A-Za-z0-9]*"
rslt = re.sub(pattern,"",txt)
print(rslt)

OUTPUT  -> Python39iscool


===================================================================================================================================================================================================================================

56.Check if a string is a rotation of another
==============================================

Input: "abcd", "cdab"
Output: True

SOLUTION
========
s1= "abcd"
s2= "cdab"

if len(s1) == len(s2) and s2 in (s1+s1):
    print("True")
else:
    print("False")
	
===================================================================================================================================================================================================================================

57.Longest substring without repeating characters
==================================================

s = "eceba"

def longest_substring(s):
    
    char_index = {}
    max_length = 0
    start = 0
    max_substring = ""
    
    for i , char in enumerate(s):
        if char in char_index  and char_index[char] >= start:
            start = char_index[char] + 1
        
        char_index[char] = i
        current_len = i-start+1
        
        if current_len > max_length:
            max_length = current_len
            max_substring = s[start:i+1]
    
    return max_substring, max_length

print(longest_substring(s))

OUTPUT
=======
('ceba', 4)

===================================================================================================================================================================================================================================

58.String Compression
=====================
Input: "aaabbcc" → Output: "a3b2c2"

SOLUTION
=========
s = "aaabbcc"

count = 1
compressed = ""

for i in range(1,len(s)):
    if s[i] == s[i-1]:
        count += 1
    else:
        compressed = compressed + s[i-1] + str(count)
        count = 1

compressed = compressed + s[-1]+ str(count)

print(compressed)
    
===================================================================================================================================================================================================================================

59.Check if a string is a valid palindrome ignoring non-alphanumerics
======================================================================

Input: "A man, a plan, a canal: Panama" → Output: True


SOLUTION
=========
s = "A man, a plan, a canal: Panama"

import re

rslt = re.sub(r"[^a-zA-Z]+","",s)

if rslt.lower() == rslt[::-1].lower():
    print(rslt.lower())
    print(rslt[::-1].lower())
    print("True")
else:
    print("False")
	
OUTPUT
=======
amanaplanacanalpanama
amanaplanacanalpanama
True

===================================================================================================================================================================================================================================

60.Valid Parentheses
=====================
Input: "({[]})" → Output: True

SOLUTION
=========
s = "({[]})"

def is_valid(s):
    stack = []
    mapping = {"}":"{","]":"[",")":"("}
    
    for char in s:
        print(stack)
        if char in mapping.values():
            stack.append(char)
        elif char in mapping:
            if not stack or stack[-1] != mapping[char]:
                return False
            stack.pop()
        else:
            continue
    return not stack
    
print(is_valid("({[]})"))  -> True
print(is_valid("({[})"))   -> False

===================================================================================================================================================================================================================================

61.Evaluate Reverse Polish Notation
=====================================
Input: ["2", "1", "+", "3", "*"] → Output: 9

SOLUTION
=========
tokens = ["2", "1", "+", "3", "*", "6", "/","6"]

def evaluation(tokens):
    stack = []
    for token in tokens:
        if token not in "+*/-":
            stack.append(int(token))
        else:
            b = stack.pop()
            a = stack.pop()
            
            if token == "+":
                stack.append(a+b)
            elif token == "-":
                stack.append(a+b)
            elif token == "*":
                stack.append(a*b)
            elif token == "/":
                stack.append(a/b)
    return stack[0]

print(evaluation(tokens))


OUTPUT   -> 1.5

===================================================================================================================================================================================================================================

62.Climbing Stairs
===================
Input: n = 4

SOLUTION
=========
n = 4

def climb_stairs(n):
    if n <= 1:
        return 1
    
    a,b = 1,1
    for _ in range(2,n+1):
        a,b = b,a+b
    
    return b

print(climb_stairs(4))

OUTPUT -> 5

===================================================================================================================================================================================================================================

63.Longest Common Subsequence
==============================

SOLUTION
=========
text1 = "abcde"
text2 = "ace"

def longest_common_subsequence(text1, text2):
    m, n = len(text1),len(text2)
    dp = [[0]*(n+1) for _ in range(m+1)]
    
    for i in range(m):
        for j in range(n):
            if text1[i] == text2[j]:
                dp[i+1][j+1] = dp[i][j] +1
            else:
                dp[i+1][j+1] = max(dp[i][j+1],dp[i+1][j])
    
    return dp[m][n]

print(longest_common_subsequence(text1,text2))

OUTPUT -> 3

===================================================================================================================================================================================================================================

64.Check if a Number is Power of Two
=====================================

SOLUTION
=========
def power(n):
    return n>0 and (n & (n-1)) == 0

print(power(8))   -> True
print(power(10))  -> False

===================================================================================================================================================================================================================================

65.Generate All Permutations of a String
=========================================

SOLUTION
=========
s = "abc"

def get_permutations(s):
    if len(s) <= 1:
        return [s]
    
    permutations=[]
    for i,char in enumerate(s):
        remaining = s[:i] + s[i+1:]
        for sub_perm in get_permutations(remaining):
            permutations.append(char+sub_perm)
    
    return permutations

print(get_permutations(s))

OUTPUT     -> ['abc', 'acb', 'bac', 'bca', 'cab', 'cba']
=======

===================================================================================================================================================================================================================================
66.Move all zeros to the end while maintaining order.
=======================================================

[0, 1, 0, 3, 12] → [1, 3, 12, 0, 0]

SOLUTION
=========
pos = 0

for i in range(len(n)):
    if n[i] != 0:
        n[pos] =n[i]
        pos +=1

for i in range(pos,len(n)):
    n[i] = 0
    
print(n)

OUTPUT -> [1, 3, 12, 0, 0]

OR

stack = [x for x in n if x != 0]
zeros = len(n) - len(stack)

result = stack + [0] * zeros
print(result)

===================================================================================================================================================================================================================================

67.Longest Common Substring From All Strings
=============================================

def longest_common_substring(strings, min_occurrences=2):
    if not strings:
        return ""
    
    longest = ""
    n = len(strings)
    
    for s in strings:
        length = len(s)
        for l in range(length,0,-1):
            for start in range(length-l+1):
                substr = s[start:start+l]
            
            if len(substr) < len(longest):
                continue
            
            count = sum(1 for s in strings if substr in s)
            
            if count>= min_occurrences:
                if len(substr) > len(longest):
                    longest = substr
                    
            if len(longest) == l:
                break
    return longest

words = ["enchashment", "cash", "milk", "catalog", "c+", "python", "cat", "dog", "cashless"]
print(longest_common_substring(words)) 

OUTPUT -> Cash

===================================================================================================================================================================================================================================
68.

def evaluate_expression(expr):
    tokens = expr.split()  # split by spaces
    result = int(tokens[0])  # start with the first number

    i = 1
    while i < len(tokens):
        op = tokens[i]
        num = int(tokens[i + 1])

        if op == '+':
            result += num
        elif op == '-':
            result -= num
        else:
            raise ValueError(f"Unsupported operator: {op}")

        i += 2  # move to next operator

    return result

# Example
expression = "2 + 1 - 3"
print(evaluate_expression(expression))  # Output: 0


OR

n = "2 + 1 - 3"

rsult = eval(n)
print(rsult) --> 0

===================================================================================================================================================================================================================================
69. Find the longest streak

nums = [5, 9, 8, 0, 88, 99, 77, 100]

def longest_streak(nums):
    max_streak = []
    current_streak = []
    
    for num in nums:
        if not current_streak or num > current_streak[-1]:
            current_streak.append(num)
        else:
            if len(current_streak) > len(max_streak):
                max_streak = current_streak
            current_streak = [num]
    
    if len(current_streak) > len(max_streak):
        max_streak = current_streak
    
    return max_streak

print(longest_streak(nums))

OUTPUT - > [0, 88, 99]

===================================================================================================================================================================================================================================
70. Find the first and last occurrences of element in sorted array

def find_first(arr, target):
    low, high = 0, len(arr)-1
    result = -1
    while low <= high:
        mid = (low + high) // 2
        if arr[mid] == target:
            result = mid
            high = mid - 1  # Keep searching left
        elif arr[mid] < target:
            low = mid + 1
        else:
            high = mid - 1
    return result

def find_last(arr, target):
    low, high = 0, len(arr)-1
    result = -1
    while low <= high:
        mid = (low + high) // 2
        if arr[mid] == target:
            result = mid
            low = mid + 1  # Keep searching right
        elif arr[mid] < target:
            low = mid + 1
        else:
            high = mid - 1
    return result

# Example (only use if array is sorted)
arr = [1, 2, 3, 3, 3, 4, 5]
target = 3
print(find_first(arr, target), find_last(arr, target))  # Output: (2, 4)

===================================================================================================================================================================================================================================
71. Find the first and last occurrences of element in Unsorted array

def find_first_and_last(arr,target):
    first = last = -1
    for i,val in enumerate(arr):
        if val == target:
            if first == -1:
                first = i
            last = i
    return first, last
    

  #Output : (2, 4)

===================================================================================================================================================================================================================================


s = "vijayalakshmi"

freq = {"a":0,"e":0,"i":0,"o":0,"u":0}
for i in s:
    if i in "aeiou" and i in freq:
        freq[i] += 1
    elif i in "aeiou":
        freq[i] = 1

sorted_dict = dict(sorted(dict.items(freq), key=lambda item:item[0], reverse = True))
print(sorted_dict)

a={1:1,2:{3:4,5:6,7:[1,2,3,{5:6},{7:8,8:["test"]}]}}

def square(num):
    for i in num:
        print(i)

square(a)



a=[1,2,3,4,5,[1,2,3,[6,7,8,9,[2,3,4,[5,6,["test"] ] ] ] ] ]

print(a[5][3][4][3][2])


a={1:1,2:{3:4,5:6,7:[1,2,3,{5:6},{7:8,8:["test"]}]} }

print(a[2][7][4][8])