

LAMBDA Function
================
rstl = lambda x:x*x
print(rstl(5))

O/P -> 25

MAP Function
=============
numbers = [1,2,3,4,5]
square_num = list(map(lambda x:x**2,numbers))

print(square_num)

O/P -> [1, 4, 9, 16, 25]


FILTER Function
================
numbers = [1,2,3,4,5]
even_num = list(filter(lambda x:x%2==0,numbers))..

print(even_num)

O/P -> [2, 4]

Reduce Function
=================
from functools import reduce

numbers = [1,2,3,4,5]
single_val = reduce(lambda x,y:x+y,numbers)

print(single_val)

O/P -> 15

Accumulate Function
====================
In Python's itertools.accumulate() function, the first argument should be an iterable (like a list or a tuple), and the second argument, if provided, is a binary function (such as a lambda function) that takes two arguments.

from itertools import accumulate

numbers = [1,2,3,4,5]
single_val = accumulate(numbers,lambda x,y:x+y)

print(list(single_val))

O/P -> [1, 3, 6, 10, 15]

ZIP Function
=============
a = ['Alice','bobby','Jen']
b = [1,2,3]
rslt = zip(a,b,('a','b','c'))
print(list(rslt))

O/P -> [('Alice', 1, 'a'), ('bobby', 2, 'b'), ('Jen', 3, 'c')]


High Order Function
====================
def square(x):
    y = x*x
    return y
    
def cube(x):
    y = x*x*x
    return y

def my_map(func,arg_list):
    result = []
    for i in arg_list:
        result.append(func(i))
    return result

map_func = my_map(square,[1,2,3])
map_func = my_map(cube,[1,2,3])
print(map_func)

O/P -> [1, 8, 27]
O/P -> [1, 4, 9]

CLOSURES
=========
def outer_func():
    msg = "Hi"
    def inner_func():
       return f"message={msg}"
    return inner_func
    
my_func = outer_func()
print(my_func())

O/P -> message = "Hi"

CLASS:
======

class student:
    def __init__(self,name,age):
        self.name = name
        self.age = age
        
    def display(self):
        return "{} student of age {}".format(self.name,self.age)
    
std1 = student("Viji",25)
print(std1.display())


Func DECORATORS
================

Developers often use this pattern to measure execution time during:

ðŸ”§ Debugging slow functions

import time

def decorator_func(func):
    def wrapper_func(*args,**kwargs):
        start = time.time()
        result = func(*args,**kwargs)
        end = time.time()
        execution_time = end - start
        print("Execution time of %s is %.4f seconds "%(func.__name__,execution_time))
    return wrapper_func

@decorator_func
def sample_func(n):
    total = 0
    for i in range(n):
        total += i
    return total


sample_func(1000000)

O/P -> Execution time of sample_func is 0.0935 seconds 

Class DECORATORS
=================
def instances_count(cls):
    cls.instance_count = 0
    original__init__ = cls.__init__
    def new__init__(self,*args,**kwargs):
        cls.instance_count += 1
        original__init__(self,*args,**kwargs)
    cls.__init__ = new__init__
    return cls
    
@instances_count
class employee:
    def __init__(self,name,position):
        self.name = name
        self.position = position

def create_employee():
       emp_1 = employee("Viji","Doctor")
       emp_2 = employee("V","singer")
       print ("Number employee instances created %s"%(employee.instance_count))
       
create_employee()

O/P -> Number employee instances created 2

PROPERTY
=========
class Employee:
    def __init__(self,fname,lname):
        self.fname = fname
        self.lname = lname
    
	#Setter
    @property
    def email(self):
        return "{}.{}@email.com".format(self.fname,self.lname)
        
    @property
    def fullname(self):
        return "{}{}".format(self.fname,self.lname)
    
    @fullname.setter
    def fullname(self,name):
        first,last = name.split(" ")
        self.fname = first
        self.lname = last
        
    @fullname.deleter
    def fullname(self):
        print ("Delete None")
        self.fname = None
        self.lname = None
        
emp1=Employee("vijaya","lakshmi")
emp1.fullname ="corey schafer"
print(emp1.email)
print(emp1.fullname)
print(emp1.fname)
print(emp1.lname)
del emp1.fullname


O/P-> 
corey.schafer@email.com
coreyschafer
corey
schafer
Delete None

MULTITHREADING
================
import time
import threading

def square(num):
    print("Calculated the square of the numbers")
    for i in num:
        time.sleep(0.2)
        print("Square :",i*i)
   
def cube(num):
    print("Calculated the cube of the numbers")
    for i in num:
        time.sleep(0.2)
        print("cube :",i*i*i)   

t = time.time()

arr =[1,2,3,4,5]

t1 = threading.Thread(target=square,args=(arr,))
t2 = threading.Thread(target=cube,args=(arr,))

t1.start()
t2.start()

t1.join()
t2.join()

print("Executed in {:.4f} seconds".format(time.time()-t))

    
O/P ->
Calculated the square of the numbers
Calculated the cube of the numbers
Square : 1
cube : 1
Square : 4
cube : 8
cube : 27
Square : 9
cube : 64
Square : 16
cube : 125
Square : 25
Executed in 1.0018 seconds

MULTIPROCESSING
================
import time
import multiprocessing

start = time.perf_counter()

def do_something(self):
    print("Sleeping for 1 second with {}".format(arr))
    time.sleep(1)
    print("Done sleeping")
    

arr = [1,2,3]
t1 = multiprocessing.Process(target=do_something,args=(arr,))
t2 = multiprocessing.Process(target=do_something,args=(arr,))

t1.start()
t2.start()

t1.join()
t2.join()

finish = time.perf_counter()

print(f"Executed in {round(finish-start,2)} seconds")

    
O/P -> 
Sleeping for 1 second with [1, 2, 3]
Sleeping for 1 second with [1, 2, 3]
Done sleeping
Done sleeping
Executed in 1.02 seconds


INHERITANCE
============
class student:
    def __init__(self,name,age):
        self.name = name
        self.age = age
        
    def display(self):
        return "{} student of age {}".format(self.name,self.age)
    
class section(student):
    def __init__(self,name,age,major):
        super().__init__(name,age)
        self.major = major
    
    def display_info(self):
        return "{} student of age:{} in {} major".format(self.name,self.age,self.major)
        
std1 = section("Viji",25,"BIO-MATHS")
print(std1.display_info())


METHOD OVERRIDING
==================	   
class Animal:
    def __init__(self,age):
        self.age = age
        
    def eat(self):
        print("Eat in animal way")

class Mammal(Animal):
    def __init__(self,age,weight):
        super().__init__(age)
        self.weight = weight
    def eat(self):
        print("Eat in mammalian way")
    def walk(self):
        print("Walk")
        
m = Mammal(5,40)
print(m.age)
print(m.weight)
m.eat()
	   
	   
ABSTRACTION
============
from abc import ABC, abstractmethod

# âœ… Custom exception class (fixed)
class InvalidOperationError(Exception):
    pass

# âœ… Abstract base class
class Stream(ABC):
    def __init__(self):
        self.opened = False

    def open(self):
        if self.opened:
            raise InvalidOperationError("Stream is already opened.")
        print("Opening stream...")
        self.opened = True

    def close(self):
        if not self.opened:
            raise InvalidOperationError("Stream is already closed.")
        print("Closing stream...")
        self.opened = False

    @abstractmethod
    def draw(self):
        pass

# âœ… Subclasses implementing the abstract method
class FileStream(Stream):
    def draw(self):
        print("Drawing from file stream")

class MemoryStream(Stream):
    def draw(self):
        print("Drawing from memory stream")

class NetworkStream(Stream):
    def draw(self):
        print("Drawing from network stream")

# âœ… Sample usage
try:
    stream = FileStream()
    stream.open()
    stream.draw()
    stream.close()

    memory_stream = MemoryStream()
    memory_stream.draw()  # You can choose to open/close if needed

except InvalidOperationError as e:
    print("Operation failed:", e)

O/P ->
network
file


POLYMORPHISM
=============
from abc import ABC,abstractmethod

class UICONTROLS(ABC):
    @abstractmethod
    def draw(self):
        pass

class DropDownList(UICONTROLS):
    def draw(self):
        print("DropDownList")

class Textbox(UICONTROLS):
    def draw(self):
        print("Textbox")

class checkbox(UICONTROLS):
    def draw(self):
        print("checkbox")

ddl = DropDownList()
txtbox = Textbox()
chck = checkbox()

controls = [ddl,txtbox,chck]
for control in controls:
    control.draw()
	
O/P -> 

DropDownList
Textbox
checkbox

ENCAPSULATION
==============

class Bank_account:
    def __init__(self,balance=0):
        self.balance = balance
        
    def deposit(self,amount):
        self.balance+=amount
        return self.balance
    
    def withdraw(self,amount):
        if self.balance >= amount:
            self.balance-=amount
        else:
            print("Insufficient funds")
    
    def check_balance(self):
        return self.balance

acc = Bank_account()
acc.deposit(5000)
print(acc.check_balance())  
acc.withdraw(5000)
print(acc.check_balance()) 
acc.withdraw(5000)


O/P ->

5000
0
Insufficient funds


Python decorator with both time and logging functionality:
===========================================================

import time
import logging

# Configure logging
logging.basicConfig(level=logging.INFO)

def time_logger(func):
    def wrapper(*args, **kwargs):
        start_time = time.time()
        result = func(*args, **kwargs)
        end_time = time.time()
        execution_time = end_time - start_time
        logging.info(f"Function '{func.__name__}' executed in {execution_time:.4f} seconds")
        return result
    return wrapper

# Example usage
@time_logger
def example_function(n):
    total = 0
    for i in range(n):
        total += i
    return total

# Call the function
example_function(1000000)


logging decorator: 
==================

import logging

# Configure logging
logging.basicConfig(level=logging.INFO)

def log_function(func):
    def wrapper(*args, **kwargs):
        logging.info(f"Executing function '{func.__name__}'")
        result = func(*args, **kwargs)
        logging.info(f"Function '{func.__name__}' executed successfully")
        return result
    return wrapper


Timing Decorator:
=================
import time

def time_function(func):
    def wrapper(*args, **kwargs):
        start_time = time.time()
        result = func(*args, **kwargs)
        end_time = time.time()
        execution_time = end_time - start_time
        print(f"Function '{func.__name__}' executed in {execution_time:.4f} seconds")
        return result
    return wrapper



Example usage: 

@log_function
@time_function
def example_function(n):
    total = 0
    for i in range(n):
        total += i
    return total

# Call the function
example_function(1000000)


The log_function decorator logs when the function starts and finishes.
The time_function decorator measures and prints the execution time of the function.

You can apply these decorators separately or stack them as shown in the example


Singleton: 
==========

A singleton class in Python is a design pattern that ensures a class has only one instance and provides a global point of access to that instance. This can be useful when exactly one object is needed to coordinate actions across the system.


class Singleton:
    _instance = None
    def __new__(cls, *args, **kwargs):
        if not cls._instance:
            cls._instance = super().__new__(cls)
        return cls._instance

    def __init__(self, value):
        if not hasattr(self, 'initialized'):
            self.value = value
            self.initialized = True

# Example usage
singleton1 = Singleton(10)
singleton2 = Singleton(20)

print(singleton1.value)  # Output: 10
print(singleton2.value)  # Output: 10
print(singleton1 is singleton2)  # Output: True



Explanation:
------------
__new__ Method: This method is responsible for creating a new instance of the class. It checks if an instance already exists (cls._instance). If not, it creates one and assigns it to cls._instance.
__init__ Method: This method initializes the instance. The initialized attribute ensures that the initialization code runs only once.
In the example:

singleton1 and singleton2 are references to the same instance.
Changing the value through one reference affects the other, demonstrating that only one instance exists.




Implementing Singleton pattern using decorator:
===============================================

def singleton(cls):
    instances = {}
    def get_instance(*args, **kwargs):
        if cls not in instances:
            instances[cls] = cls(*args, **kwargs)
        return instances[cls]
    return get_instance
	
	
@singleton
class Singleton:
    def __init__(self, value):
        self.value = value

# Example usage
singleton1 = Singleton(10)
singleton2 = Singleton(20)

print(singleton1.value)  # Output: 10
print(singleton2.value)  # Output: 10
print(singleton1 is singleton2)  # Output: True



Implementing Singleton pattern Using a Metaclass:
=================================================
Another approach is to use a metaclass to control the instance creation:


class SingletonMeta(type):
    _instances = {}
    def __call__(cls, *args, **kwargs):
        if cls not in cls._instances:
            cls._instances[cls] = super(SingletonMeta, cls).__call__(*args, **kwargs)
        return cls._instances[cls]

class Singleton(metaclass=SingletonMeta):
    def __init__(self, value):
        self.value = value

# Example usage
singleton1 = Singleton(10)
singleton2 = Singleton(20)

print(singleton1.value)  # Output: 10
print(singleton2.value)  # Output: 10
print(singleton1 is singleton2)  # Output: True


Explanation
-----------
Decorator Approach: The singleton decorator function ensures that only one instance of the class is created. It uses a dictionary to store the instance.
Metaclass Approach: The SingletonMeta metaclass overrides the __call__ method to control the instantiation process, ensuring only one instance is created.


Both approaches achieve the same goal of ensuring a single instance of the class. You can choose the one that best fits your coding style and requirements.

===================================================================================================================================================================================================================================
                                                                   INTERVIEW QUESTIONS
																   ====================

                                                                       ===============
                                                                         INFOSYS BPM
                                                                       ================
Find the freq of characters (also using dict comprehension)

SOLUTION
---------
txt = "abracadabra"

freq = {}
for i in txt:
    if i in freq:
        freq[i] += 1
    else:
        freq[i] = 1

print(freq)

freq = {char:sum(1 for i in txt if i == char) for char in txt}
print(freq)

max_val = max(freq.values())
print(max_val)

for char,count in freq.items():
    if count == max_val:
        print(f"{char}:{count}")
		
Output
------
{'a': 5, 'b': 2, 'r': 2, 'c': 1, 'd': 1}
5
a:5
******************************************************************************	
Find the second largest num in list using quick sort

SOLUTION
---------
lst = [8,7,6,3,9,1,2]

def quick_sort(num):
    if len(num) <= 1:
        return num
    pivot = num[len(num)//2]
    left = [x for x in num if x < pivot]
    right = [x for x in num if x > pivot]
    middle = [x for x in num if x == pivot]
    
    return quick_sort(left) + middle + quick_sort(right)

sorted_lst = quick_sort(lst)
print(sorted_lst)
print(f"Second largest number is: ",sorted_lst[-2])

Output
-------
[1, 2, 3, 6, 7, 8, 9]
Second largest number is:  8


                                                                       ===============
                                                                           IOPEX
                                                                       ================
Serialize and deserialize string

SOLUTION
---------
string = "Hello world"
import pickle

serialized_str = pickle.dumps(string)
print(serialized_str)

deserialized_str = pickle.loads(serialized_str)
print(deserialized_str)

Output
-------
b'\x80\x04\x95\x0f\x00\x00\x00\x00\x00\x00\x00\x8c\x0bHello world\x94.'
Hello world


                                                                       ===============
                                                                           VueData
                                                                       ================

Find the duplicates in the list

SOLUTION
---------
num = [1,5,7,9,2,3,4,5,6,7,8,1,5,6,7]

new_lst = []
for i in num:
    if i not in new_lst:
        new_lst.append(i)

new_lst.sort()
print(new_lst)


USING LIST COMPREHENSION
--------------------------

seen  = set()
new_lst = [i for i in num if i not in seen and not seen.add(i)]

print(new_lst)

Output
-------
[1, 2, 3, 4, 5, 6, 7, 8, 9]
******************************************************************************	

Reverse the string

SOLUTION
---------
string = "Programming"

reversed_str = ""
for i in string:
    reversed_str = i + reversed_str

print(reversed_str)

Output
-------
gnimmargorP


                                                                       ===============
                                                                           MSYS
                                                                       ================


Find the prime number

SOLUTION
---------
num = int(input('Enter the number: '))

def prime_num(n):
    if n == 1:
        return False
    if n == 2:
        return True
    if n % 2 ==0:
        return False
    for i in range(3,int(n*0.5)+1,2):
        if n % i == 0:
            return False
    return True
    
def print_prime_num(num):
    primes = [str(i) for i in range(2,num) if prime_num(i)]
    print(",".join(primes))

print_prime_num(num)

Output
-------
Enter the number: 12
2,3,5,7,11

******************************************************************************	
#input = [[1,2,3],[4,5,6],[7,8,9]]
#Output = [[7,4,1],[8,5,2],[9,6,3]]

num = [[1,2,3],[4,5,6],[7,8,9]]

sorted_lst = []
for i in num:
    sorted_lst = [i] + sorted_lst

rslt = []
j = 0
while j < len(sorted_lst):
    lst = []
    for i in range(0,len(sorted_lst)):
        lst.append(sorted_lst[i][j])
    rslt.append(lst)
    j += 1
    
print(rslt)

OUTPUT
-------
[[7, 4, 1], [8, 5, 2], [9, 6, 3]]


                                                                       ===============
                                                                           CGI
                                                                       ================
find the freq of characters using dict comprehension


                                                                       ===============
                                                                           XORIANT
                                                                       ================
string = "programming"
freq = {}

# Count character frequencies
for i in string:
    if i in freq:
        freq[i] += 1
    else:
        freq[i] = 1

print(freq)

# Find the max frequency
max_freq = max(freq.values())

# Find the first character in the string with that frequency
for i in string:
    if freq[i] == max_freq:
        print("First highest occurring character:", i)
        break


******************************************************************************
import re

email_text = "Please contact us at support@xoriant.com or sales@xoriant.org for assistance."

# Updated pattern to match email addresses within a string
pattern = r'[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}'

result = re.findall(pattern, email_text)
print("Extracted emails:", result)

if result:
    print("Email(s) found:", result)
else:
    print("Not found")

Generate All Permutations of a String
=========================================

SOLUTION
=========
s = "abc"

def get_permutations(s):
    if len(s) <= 1:
        return [s]
    
    permutations=[]
    for i,char in enumerate(s):
        remaining = s[:i] + s[i+1:]
        for sub_perm in get_permutations(remaining):
            permutations.append(char+sub_perm)
    
    return permutations

print(get_permutations(s))

OUTPUT     -> ['abc', 'acb', 'bac', 'bca', 'cab', 'cba']
=======
                                                                        ===============
                                                                             EY
                                                                       ================   

Anagrams
---------
def sort_string(s):
    return ''.join(sorted(s)) 

def are_anagrams(str1, str2):
    return sort_string(str1) == sort_string(str2)

def group_anagrams(words):
    used = [False] * len(words)
    result = []
    
    for i in range(len(words)):
        if not used[i]:
            anagram_group = [words[i]]
            used[i] = True
            for j in range(i + 1, len(words)):
                if not used[j] and are_anagrams(words[i], words[j]):
                    anagram_group.append(words[j])
                    used[j] = True
            result.append(anagram_group)
    return result

strs = ["eat","tea","tan","ate","nat","bat"]
print(group_anagrams(strs))
            
******************************************************************************          

num = [[1], [1, 2, 3], [1,2, 3, 4], [1,2, 3, 4, 5], [1,2, 3, 4, 5, 6]]

def flatten(num):
    new_lst = []
    for i in num:
        if isinstance(i,list):
            new_lst.extend(flatten(i))
        else:
            new_lst.append(i)
    return new_lst
    
print(flatten(num))

flattened = set([item for i in num for item in i ])
print(list(flattened))


LIST comprehension
===================
n = [1, [2, 3], [4, [5]]]

def flatten(lst):
    return [item for sublist in lst for item in (flatten(sublist) if isinstance(sublist, list) else [sublist])]

flattened = flatten(n)
print(flattened)

===============================================================================

                                                                        ==================
                                                                            ALTIMETRIK
                                                                        ==================   

'''write a program which will check whether a string is suitable for being a password or not. THe conditions for being password are the following - 
1. Minimum 8 characters Maximum 25 characters; 
2. at least 1 capital, 1 small, 1 number, 1 special character; 
3. 2 comsecutive alphabets or numbers should not be there in password like ab or 12. write true is all conditions are satisfied, write false and the condition not satisfied if any condition is not satisfied'''

SOLUTION
---------
import re
txt = input("Enter the password: ")

def is_valid(txt):
    if not (8<len(txt)<25):
        print("Characters should be more than 8 and less than 25 are allowed")
        return False
    if not re.search(r'[A-Z]',txt):
        print("At least one Uppercase should be used")
        return False
    if not re.search(r'[a-z]',txt):
        print("At least one Lowercase should be used")
        return False
    if not re.search(r'[0-9]',txt):
        print("At least one digit should be used")
        return False
    if not re.search(r'[^A-Za-z0-9]',txt):
        print("At least one special character should be used")
        return False
    for i in range(0,len(txt)-1):
        if txt[i].isalpha() and txt[i+1].isalpha():
            if ord(txt[i].lower()) + 1 == ord(txt[i+1].lower()):
                print("Not satisfied due to consecutive alphabets entered")
                return False
        if txt[i].isdigit() and txt[i+1].isdigit():
            if int(txt[i])+1 == int(txt[i+1]):
                print("Not satisfied due to consecutive numbers entered")
                return False
    return True

if is_valid(txt):
    print("Satisfied")
else:
    print("Not Satisfied")
	
Output
-------
Enter the password: Ahdldkewl@17683
Satisfied

Enter the password: aBrqot@183
Not satisfied due to consecutive alphabets entered
Not Satisfied

    
******************************************************************************  

Prime Number
-------------
 
#Example - input 12, print 2 3 5 7 11; input 6, print 2 3 5

def prime_num(num):
    if num == 1:
        return 1
    if num == 2:
        return True
    if num %2 == 0:
        return False
    for i in range(3,int(num*0.5)+1,2):
        if num % i == 0:
            return False
    return True

def print_prime(limit):
    primes = [str(i) for i in range(2,limit) if prime_num(i)]
    print(",".join(primes))

num = int(input("Enter the number: "))
print_prime(num)
        
		
=========================================================================================================================================================


import re

txt = "https://unifiedportal-mem.epfindia.gov.in/memberinterface/online/claim/onlineClaimStatus?_HDIV_STATE_=19-18-9B3456300E9024FFB5AB8FA"

pattern = r'_[A-Z]+_[A-Z]+_[_=][0-9]{2}-[0-9]{2}-[A-Z0-9]+'

result = re.sub(pattern," ",txt)
#result = re.findall(pattern,txt)
print(result)