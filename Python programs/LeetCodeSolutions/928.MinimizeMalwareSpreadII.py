"""
928. Minimize Malware Spread II
https://leetcode.com/problems/minimize-malware-spread-ii/

You are given a network of n nodes represented as an n x n adjacency matrix graph, where graph[i][j] = 1 means node i is connected to node j, and graph[i][j] = 0 otherwise. Initially, some nodes are infected. You can remove one node from the initial list to minimize the spread of malware. Return the node that, if removed, minimizes the spread. If multiple answers, return the smallest one.

Constraints:
- n == graph.length
- n == graph[i].length
- 2 <= n <= 300
- graph[i][j] is 0 or 1
- graph[i][j] == graph[j][i]
- 1 <= initial.length < n
- 0 <= initial[i] < n

Example:
Input: graph = [[1,1,0],[1,1,0],[0,0,1]], initial = [0,1]
Output: 1
"""
from typing import List

class Solution:
    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
        n = len(graph)
        res = min(initial)
        min_infected = float('inf')
        for node in initial:
            infected = set(initial)
            infected.remove(node)
            seen = set(infected)
            stack = list(infected)
            while stack:
                u = stack.pop()
                for v in range(n):
                    if graph[u][v] and v not in seen:
                        seen.add(v)
                        stack.append(v)
            if len(seen) < min_infected or (len(seen) == min_infected and node < res):
                min_infected = len(seen)
                res = node
        return res

# Example usage
if __name__ == "__main__":
    graph = [[1,1,0],[1,1,0],[0,0,1]]
    initial = [0,1]
    print(Solution().minMalwareSpread(graph, initial))  # Output: 1
