"""
924. Minimize Malware Spread
https://leetcode.com/problems/minimize-malware-spread/

You are given a network of n nodes represented as an n x n adjacency matrix graph, where graph[i][j] = 1 means node i is connected to node j, and graph[i][j] = 0 otherwise. Initially, some nodes are infected. You can remove one node from the initial list to minimize the spread of malware. Return the node that, if removed, minimizes the spread. If multiple answers, return the smallest one.

Constraints:
- n == graph.length
- n == graph[i].length
- 2 <= n <= 300
- graph[i][j] is 0 or 1
- graph[i][j] == graph[j][i]
- 1 <= initial.length < n
- 0 <= initial[i] < n

Example:
Input: graph = [[1,1,0],[1,1,0],[0,0,1]], initial = [0,1]
Output: 0
"""
from typing import List

class Solution:
    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
        n = len(graph)
        colors = [-1] * n
        c = 0
        def dfs(u, color):
            colors[u] = color
            for v in range(n):
                if graph[u][v] and colors[v] == -1:
                    dfs(v, color)
        for u in range(n):
            if colors[u] == -1:
                dfs(u, c)
                c += 1
        size = [0] * c
        for color in colors:
            size[color] += 1
        count = [0] * c
        for u in initial:
            count[colors[u]] += 1
        res = float('inf')
        ans = min(initial)
        for u in initial:
            color = colors[u]
            if count[color] == 1:
                if size[color] > res or (size[color] == res and u < ans):
                    continue
                res = size[color]
                ans = u
        return ans

# Example usage
if __name__ == "__main__":
    graph = [[1,1,0],[1,1,0],[0,0,1]]
    initial = [0,1]
    print(Solution().minMalwareSpread(graph, initial))  # Output: 0
