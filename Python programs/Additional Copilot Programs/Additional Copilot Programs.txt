



addition copilot programs:


1. Merge Two Sorted Lists:


This program merges two sorted lists into one sorted list.


def merge_sorted_lists(list1, list2):
    merged_list = []
    i, j = 0, 0
    while i < len(list1) and j < len(list2):
        if list1[i] < list2[j]:
            merged_list.append(list1[i])
            i += 1
        else:
            merged_list.append(list2[j])
            j += 1
    merged_list.extend(list1[i:])
    merged_list.extend(list2[j:])
    return merged_list

# Example usage
list1 = [1, 3, 5, 7]
list2 = [2, 4, 6, 8]
merged_list = merge_sorted_lists(list1, list2)
print("Merged list:", merged_list)



why we are putting extend() at the end:
The extend function is used at the end of the merge_sorted_lists function to add any remaining elements from list1 or list2 to the merged_list. Here's why this is necessary:

1. Exhausting One List: The while loop merges elements from both lists until one of the lists is fully traversed. At this point, one of the lists might still have elements left.

2. Appending Remaining Elements: The extend function is used to append these remaining elements to the merged_list. Since both list1 and list2 are already sorted, the remaining elements in either list are guaranteed to be greater than all the elements already in merged_list.

Here's a step-by-step breakdown:

	The while loop runs as long as there are elements in both list1 and list2.
	Inside the loop, the smaller element from the current positions of list1 and list2 is appended to merged_list.
	Once the loop exits, one of the lists is fully traversed, and the other list still has elements left.
	The extend function is then used to add the remaining elements from the non-exhausted list to merged_list.

This ensures that all elements from both lists are included in the final merged list, maintaining the sorted order.






2. Find All Permutations of a String

This program finds all permutations of a given string.


def permute(s):
    if len(s) == 1:
        return [s]
    permutations = []
    for i, char in enumerate(s):
        for perm in permute(s[:i] + s[i+1:]):
            permutations.append(char + perm)
    return permutations

# Example usage
string = "abc"
permutations = permute(string)
print("Permutations:", permutations)





3. Calculate Fibonacci Sequence

This program calculates the Fibonacci sequence up to a given number of terms.


def fibonacci(n):
    fib_sequence = [0, 1]
    while len(fib_sequence) < n:
        fib_sequence.append(fib_sequence[-1] + fib_sequence[-2])
    return fib_sequence[:n]

# Example usage
num_terms = 10
fib_sequence = fibonacci(num_terms)
print("Fibonacci sequence:", fib_sequence)






4. Check for Palindrome

This program checks if a given string is a palindrome.


def is_palindrome(s):
    return s == s[::-1]

# Example usage
string = "radar"
print(f"Is '{string}' a palindrome?", is_palindrome(string))
