


List Comprehensions: 
--------------------

nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

1. you need to iterate a list
2. you need to check a logic 
3. Based on the check, you will push the elements into a new list 


# I want 'n' for each 'n' in nums
my_list = []
for n in nums:
	my_list.append(n)
print(my_list)


my_list = [n for n in nums]



# I want 'n*n' for each 'n' in nums
 my_list = []
for n in nums:
	my_list.append(n*n)
print(my_list)

my_list = [n*n for n in nums]



# using a map + lambda
my_list = map(lambda n: n*n, nums)
print(my_list) 



# I want 'n' for each 'n in nums if 'n' is even
 my_list = []
for n in nums:
	if n%2 == 0:
		my_list.append(n)
print(my_list)

my_list = [n for n in nums if n%2 == 0]

my_list = filter(lambda n: n%2 == 0, nums)
print(my_list)




# I want a (letter, num) pair for each letter in 'abcd' and each number in '0123'
my_list = []
for letter in 'abcd':
	for num in range(4):
		my_list.append((letter, num))
print(my_list)


my_list = [(letter, num) for letter in 'abcd' for num in range(4)]


# you can also extend this with 'if' condition:
my_list = [(letter, num) for letter in 'abcd' for num in range(4) if num % 2 == 0]



#Dictionary Comprehensions

names = ['Bruce', 'Clark', 'Peter', 'Logan', 'Wade']
heroes = ['Batman', 'Superman', 'Spiderman', 'Wolverine', 'Deadpool']

print(list(zip(names, heroes))

my_dict = {}
for name, hero in zip(names, heroes):
	my_dict[name] = hero  # my_dict.update({name: hero})
print(my_dict)


my_dict = {name: hero for name, hero in zip(names, heroes)}


# you can also add check if you want to:
my_dict = {name: hero for name, hero in zip(names, heroes) if name != 'Peter'}




#Set Comprehensions 
nums = [1,1,2,1,3,4,5,6,6,3,1,7,8,3,0,]

my_set = set()
for n in nums: 
	my_set.add(n)
print(my_set)


my_set = {n for n in nums}
print(my_set)



# Generator Expressions
# I want to yield 'n*n' for each 'n' in nums

A Generator is a function that returns an iterator(a traversal object) that produces a sequence of values when iterated over.
Generators are useful when we want to produce a large sequence of values, but we don't want to store all of them in memory at once.


nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

def gen_func(nums):
	for n in nums:
		yield n*n
		
		
my_gen = gen_func(nums)

for i in my_gen:
	print(i)

my_gen  = (n*n for n in nums)

print(my_gen)

for i in my_gen:
	print(i)
