
Monkey patching in Python refers to the technique of changing the behavior of a module, class, or object at runtime. This can be useful for testing, debugging, or extending the functionality of existing code.

Here's an example of monkey patching in Python:

Suppose we have a module named 'app.py' that contains a function to create a connection string:


# app.py
--------
DEFAULT_CONFIG = {"user": "user1", "database": "db1"}

def create_connection_string(config=None):
    """Creates a connection string from input or defaults."""
    config = config or DEFAULT_CONFIG
    return f"User Id={config['user']}; Location={config['database']};"
	
	
	
For testing purposes, we can patch the DEFAULT_CONFIG dictionary to specific values. Here's an example of how to do this using the monkeypatch fixture in pytest:

# test_app.py
-------------
import app


def test_connection(monkeypatch):
    # Patch the values of DEFAULT_CONFIG to specific testing values only for this test.
    monkeypatch.setitem(app.DEFAULT_CONFIG, "user", "test_user")
    monkeypatch.setitem(app.DEFAULT_CONFIG, "database", "test_db")

    # expected result based on the mocks
    expected = "User Id=test_user; Location=test_db;"

    # the test uses the monkeypatched dictionary settings
    result = app.create_connection_string()
    assert result == expected
	
	
	
In this example, we use the monkeypatch fixture to modify the DEFAULT_CONFIG dictionary in the app module. The setitem method allows us to set the user and database keys to specific testing values. The create_connection_string function then uses the monkeypatched dictionary instead of the original one.

This is just one example of monkey patching in Python. Monkey patching can also be used to modify classes, functions, and other objects at runtime. However, it's important to use monkey patching judiciously, as it can make code harder to understand and maintain. It's generally recommended to use monkey patching for testing and debugging purposes only.





For more information, go through https://docs.pytest.org/en/latest/how-to/monkeypatch.html