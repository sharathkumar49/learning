

Let's unravel the classic Cigarette Smokers Problem—a synchronization puzzle that pushes coordination and resource management to a higher level. This problem is especially interesting because it involves an agent that offers resources and several smokers, each with an infinite supply of one unique ingredient. The challenge is to ensure that when the agent places two ingredients on the table, only the smoker who has the third ingredient (and hence is able to make a cigarette) is allowed to proceed without running into deadlock or starvation.



1. Problem Definition

Imagine the following scenario:

- Ingredients: A cigarette requires three items: tobacco, paper, and matches.
- Smokers: There are three smoker threads:
  - Smoker A (has tobacco): Needs paper and matches.
  - Smoker B (has paper): Needs tobacco and matches.
  - Smoker C (has matches): Needs tobacco and paper.
- Agent: One agent thread is responsible for placing two random ingredients on the table. For instance, if the agent puts down paper and matches, then only the smoker with tobacco can complete their cigarette.
- Cycle:  
  1. The agent randomly selects a pair of ingredients to put on the table.
  2. The smoker who has the complementary (missing) ingredient is signaled, picks up the items, makes a cigarette, and smokes.
  3. After the smoker finishes, the smoker signals the agent so that the agent can make the next pair available.




2. The Synchronization Challenge

The inherent difficulty lies in the coordination:

- Using Semaphores Alone is Tricky: The naïve semaphore solution is known to be unsolvable in a simple way because the smokers and agent must not know about each other’s state beyond the signaling.  
- Need for “Pushers”: A popular solution introduces helper (or *pusher*) threads. Each pusher is associated with one ingredient and helps to combine signals from the agent so that the proper smoker is notified.  
- Core Idea with Pushers:  
  - When an ingredient is placed on the table, its corresponding semaphore is released.
  - A pusher waiting on that semaphore enters a critical section (protected by a mutex) and checks if another ingredient is already present (using a flag).  
  - If so, the pusher resets that ingredient flag and signals the smoker who has the missing item.
  - If not, the pusher sets its own flag.  
- Critical Semaphores in the Design:  
  - Agent Semantics: The agent places resources and then waits (using a “done” semaphore) until a smoker finishes smoking.
  - Smoker Semaphores: Each smoker waits on a dedicated semaphore that is signaled only when the other two ingredients are on the table.
  - Pusher Semaphores: One for each ingredient (tobacco, paper, and match) to notify the corresponding pusher threads.

This design guarantees:
- No Deadlocks: Because the pushers combine signals in a controlled manner.
- No Starvation: Because every time the agent puts items on the table, exactly one smoker (the one with the missing ingredient) is allowed to proceed.




3. Python Simulation Using Pushers

Below is a comprehensive Python simulation that mirrors the solution. In this code, we use semaphores and a lock to coordinate between the agent, three pushers, and three smoker threads.

import threading
import time
import random

# --- Semaphores and Synchronization Primitives ---
# Semaphores for the ingredients placed on the table by the agent.
sem_tobacco = threading.Semaphore(0)
sem_paper   = threading.Semaphore(0)
sem_match   = threading.Semaphore(0)

# Semaphores for the smokers waiting for their missing ingredient.
smoker_tobacco = threading.Semaphore(0)  # Smoker with tobacco waits here (needs paper and match)
smoker_paper   = threading.Semaphore(0)  # Smoker with paper waits here (needs tobacco and match)
smoker_match   = threading.Semaphore(0)  # Smoker with match waits here (needs tobacco and paper)

# This semaphore allows the agent to wait until a smoker is done smoking.
agent_sem = threading.Semaphore(0)

# Mutex to protect the pusher flags.
pusher_mutex = threading.Lock()

# Flags to represent that an ingredient is available on the table.
# These are used by the pusher threads to combine ingredients.
is_tobacco = False
is_paper   = False
is_match   = False

# --- Agent Thread ---
def agent():
    ingredients = ['TP', 'TM', 'PM']  # TP: Tobacco & Paper, TM: Tobacco & Match, PM: Paper & Match
    while True:
        # Let the agent think before putting ingredients on the table.
        time.sleep(random.uniform(1, 2))
        choice = random.choice(ingredients)
        print(f"\nAgent puts on table:", end=" ")
        if choice == "PM":
            print("Paper and Match")
            sem_paper.release()
            sem_match.release()
        elif choice == "TM":
            print("Tobacco and Match")
            sem_tobacco.release()
            sem_match.release()
        elif choice == "TP":
            print("Tobacco and Paper")
            sem_tobacco.release()
            sem_paper.release()
        
        # Wait for the smoker to finish smoking before proceeding.
        agent_sem.acquire()

# --- Pusher Threads ---
def pusher_tobacco():
    global is_tobacco, is_paper, is_match
    while True:
        sem_tobacco.acquire()
        with pusher_mutex:
            if is_paper:
                is_paper = False
                # Tobacco + Paper available => missing Match; signal smoker with match.
                print("Pusher (Tobacco) signals smoker with MATCH")
                smoker_match.release()
            elif is_match:
                is_match = False
                # Tobacco + Match available => missing Paper; signal smoker with paper.
                print("Pusher (Tobacco) signals smoker with PAPER")
                smoker_paper.release()
            else:
                is_tobacco = True

def pusher_paper():
    global is_tobacco, is_paper, is_match
    while True:
        sem_paper.acquire()
        with pusher_mutex:
            if is_tobacco:
                is_tobacco = False
                # Tobacco + Paper available => missing Match; signal smoker with match.
                print("Pusher (Paper) signals smoker with MATCH")
                smoker_match.release()
            elif is_match:
                is_match = False
                # Paper + Match available => missing Tobacco; signal smoker with tobacco.
                print("Pusher (Paper) signals smoker with TOBACCO")
                smoker_tobacco.release()
            else:
                is_paper = True

def pusher_match():
    global is_tobacco, is_paper, is_match
    while True:
        sem_match.acquire()
        with pusher_mutex:
            if is_tobacco:
                is_tobacco = False
                # Tobacco + Match available => missing Paper; signal smoker with paper.
                print("Pusher (Match) signals smoker with PAPER")
                smoker_paper.release()
            elif is_paper:
                is_paper = False
                # Paper + Match available => missing Tobacco; signal smoker with tobacco.
                print("Pusher (Match) signals smoker with TOBACCO")
                smoker_tobacco.release()
            else:
                is_match = True

# --- Smoker Threads ---
def smoker_with_tobacco():
    # This smoker has an infinite supply of tobacco and needs paper and match.
    while True:
        smoker_tobacco.acquire()
        print("Smoker with TOBACCO is making a cigarette (using paper and match).")
        time.sleep(random.uniform(1, 2))  # Time to roll and smoke the cigarette.
        print("Smoker with TOBACCO has finished smoking.\n")
        agent_sem.release()  # Signal the agent to produce more items.

def smoker_with_paper():
    # This smoker has an infinite supply of paper and needs tobacco and match.
    while True:
        smoker_paper.acquire()
        print("Smoker with PAPER is making a cigarette (using tobacco and match).")
        time.sleep(random.uniform(1, 2))
        print("Smoker with PAPER has finished smoking.\n")
        agent_sem.release()

def smoker_with_match():
    # This smoker has an infinite supply of match and needs tobacco and paper.
    while True:
        smoker_match.acquire()
        print("Smoker with MATCH is making a cigarette (using tobacco and paper).")
        time.sleep(random.uniform(1, 2))
        print("Smoker with MATCH has finished smoking.\n")
        agent_sem.release()

# --- Main Execution ---
if __name__ == "__main__":
    # Start the agent thread.
    agent_thread = threading.Thread(target=agent, daemon=True)
    agent_thread.start()
    
    # Start pusher threads.
    threading.Thread(target=pusher_tobacco, daemon=True).start()
    threading.Thread(target=pusher_paper, daemon=True).start()
    threading.Thread(target=pusher_match, daemon=True).start()
    
    # Start smoker threads.
    threading.Thread(target=smoker_with_tobacco, daemon=True).start()
    threading.Thread(target=smoker_with_paper, daemon=True).start()
    threading.Thread(target=smoker_with_match, daemon=True).start()
    
    # Let the simulation run for a certain amount of time.
    time.sleep(30)
    print("Simulation complete. Exiting.")





4. Key Points & Discussion

- Agent Operation:  
  The agent randomly decides which two ingredients to place on the table and releases the corresponding semaphores. It then waits until a smoker signals that they have finished smoking. This cycle continues indefinitely.

- Pusher Role:  
  Each pusher thread waits for its designated ingredient. Inside a critical section (protected by a mutex), it checks if a complementary ingredient is already present. If it is, it resets the flag and signals the appropriate smoker. Otherwise, it sets its flag to indicate that its ingredient is now on the table.

- Smoker Operation:  
  Each smoker waits on a semaphore that is signaled only when the two ingredients they need are available. After making and smoking a cigarette, they signal the agent to let the cycle continue.

- Avoiding Deadlock and Starvation:  
  By using pushers to combine signals and selectively waking only the smoker who has the missing resource, we prevent multiple smokers from competing for the same resources and ensure that progress is made on every cycle.






5. Relevance and Learning Outcomes

- Resource Allocation:  
  The Cigarette Smokers Problem elegantly illustrates how resource allocation can be coordinated even when threads have different supplies.
- Coordination Complexity:  
  Introducing pushers shows how sometimes extra helper threads and shared state (with proper locking) are needed to coordinate complex interactions.
- Limitations of Semaphores Alone:  
  The problem is a classic example often cited to highlight that even with semaphores and locks, careful design is required to avoid deadlock or subtle waiting issues.

This problem not only serves as an excellent academic exercise in understanding synchronization but also reflects real-world scenarios where multiple agents must indirectly coordinate based on partial information.

