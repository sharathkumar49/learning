Multithreading: 
===============

Initial:
--------

import time

start = time.perf_counter()


def do_something():
	print('Sleeping 1 second')
	time.sleep(1)
	print('Done sleeping...')
	
	
	
do_something()


finish = time.perf_counter()

print(f'Finished in {round(finish-start), 2)} seconds')




Using threading module: (old way of doing)
------------------------------------------
 
import threading
import time

start = time.perf_counter()


def do_something():
	print('Sleeping 1 second')
	time.sleep(1)
	print('Done sleeping...')
	
	
	
t1 = threading.Thread(target=do_something)
t2 = threading.Thread(target=do_something)

t1.start()
t2.start()

t1.join()
t2.join()


finish = time.perf_counter()

print(f'Finished in {round(finish-start), 2)} seconds')



Using threading module: (passing arguments)
------------------------------------------

import threading
import time

start = time.perf_counter()


def do_something(seconds):
	print(f'Sleeping {seconds} second')
	time.sleep(seconds)
	print('Done sleeping...')
	
	
threads = []
	
for _ in range(10):
	t=threading.Thread(target=do_something, args=[1.5])
	t.start()
	thread.append(t)
	
for thread in threads:
	thread.join()

finish = time.perf_counter()

print(f'Finished in {round(finish-start), 2)} seconds')



Using concurrent.futures module (using submit function):
-------------------------------------------------------

import concurrent.futures
import time

start = time.perf_counter()


def do_something(seconds):
    print(f'Sleeping {seconds} second(s)...')
    time.sleep(seconds)
    return f'Done Sleeping...{seconds}'


with concurrent.futures.ThreadPoolExecutor() as executor:
    f1=executor.submit(do_something, 1)
	print(f1.result())

finish = time.perf_counter()

print(f'Finished in {round(finish-start, 2)} second(s)')




using list comprehension:
--------------------------

import concurrent.futures
import time

start = time.perf_counter()


def do_something(seconds):
    print(f'Sleeping {seconds} second(s)...')
    time.sleep(seconds)
    return f'Done Sleeping...{seconds}'


with concurrent.futures.ThreadPoolExecutor() as executor:
	secs = [5, 4, 3 ,2, 1]
	results = [executor.submit(do_something, sec) for sec in secs]
	
	for f in concurrrent.futures.as_completed(results):
		print(f.result())
	

finish = time.perf_counter()

print(f'Finished in {round(finish-start, 2)} second(s)')




using map:
---------
import concurrent.futures
import time

start = time.perf_counter()


def do_something(seconds):
    print(f'Sleeping {seconds} second(s)...')
    time.sleep(seconds)
    return f'Done Sleeping...{seconds}'


with concurrent.futures.ThreadPoolExecutor() as executor:
    secs = [5, 4, 3, 2, 1]
    results = executor.map(do_something, secs)
	
	for result in results:
		print(result)


finish = time.perf_counter()

print(f'Finished in {round(finish-start, 2)} second(s)')



Mutlithread example (download images):
-------------------------------------

import requests
import time
import concurrent.futures

img_urls = [
    'https://images.unsplash.com/photo-1516117172878-fd2c41f4a759',
    'https://images.unsplash.com/photo-1532009324734-20a7a5813719',
    'https://images.unsplash.com/photo-1524429656589-6633a470097c',
    'https://images.unsplash.com/photo-1530224264768-7ff8c1789d79',
    'https://images.unsplash.com/photo-1564135624576-c5c88640f235',
    'https://images.unsplash.com/photo-1541698444083-023c97d3f4b6',
    'https://images.unsplash.com/photo-1522364723953-452d3431c267',
    'https://images.unsplash.com/photo-1513938709626-033611b8cc03',
    'https://images.unsplash.com/photo-1507143550189-fed454f93097',
    'https://images.unsplash.com/photo-1493976040374-85c8e12f0c0e',
    'https://images.unsplash.com/photo-1504198453319-5ce911bafcde',
    'https://images.unsplash.com/photo-1530122037265-a5f1f91d3b99',
    'https://images.unsplash.com/photo-1516972810927-80185027ca84',
    'https://images.unsplash.com/photo-1550439062-609e1531270e',
    'https://images.unsplash.com/photo-1549692520-acc6669e2f0c'
]

t1 = time.perf_counter()


def download_image(img_url):
    img_bytes = requests.get(img_url).content
    img_name = img_url.split('/')[3]
    img_name = f'{img_name}.jpg'
    with open(img_name, 'wb') as img_file:
        img_file.write(img_bytes)
        print(f'{img_name} was downloaded...')


with concurrent.futures.ThreadPoolExecutor() as executor:
    executor.map(download_image, img_urls)


t2 = time.perf_counter()

print(f'Finished in {t2-t1} seconds')

======================================================================================================================================================================================

MultiProcessing:
===============

using multiprocessing module:
----------------------------

import multiprocessing
import time

start = time.perf_counter()


def do_something():
	print('Sleeping 1 second')
	time.sleep(1)
	print('Done sleeping...')
	
	
	
p1 = multiprocessing.Process(target=do_something)
p2 = multiprocessing.Process(target=do_something)

p1.start()
p2.start()

p1.join()
p2.join()


finish = time.perf_counter()

print(f'Finished in {round(finish-start), 2)} seconds')




Using multiprocessing module: (passing arguments)
------------------------------------------------

import multiprocessing
import time

start = time.perf_counter()


def do_something(seconds):
	print(f'Sleeping {seconds} second')
	time.sleep(seconds)
	print('Done sleeping...')
	
	
processes = []
	
for _ in range(10):
	p = multiprocessing.Process(target=do_something, args=[1.5])
	p.start()
	processes.append(t)
	
for process in processes:
	process.join()

finish = time.perf_counter()

print(f'Finished in {round(finish-start), 2)} seconds')



Using concurrent.futures module (using submit function):
-------------------------------------------------------

import concurrent.futures
import time

start = time.perf_counter()


def do_something(seconds):
    print(f'Sleeping {seconds} second(s)...')
    time.sleep(seconds)
    return f'Done Sleeping...{seconds}'


with concurrent.futures.ProcessPoolExecutor() as executor:
    f1=executor.submit(do_something, 1)
	print(f1.result())

finish = time.perf_counter()

print(f'Finished in {round(finish-start, 2)} second(s)')



using list comprehension:
--------------------------

import concurrent.futures
import time

start = time.perf_counter()


def do_something(seconds):
    print(f'Sleeping {seconds} second(s)...')
    time.sleep(seconds)
    return f'Done Sleeping...{seconds}'


with concurrent.futures.ProcessPoolExecutor() as executor:
	secs = [5, 4, 3 , 2, 1]
	results = [executor.submit(do_something, sec) for sec in secs]
	
	for f in concurrrent.futures.as_completed(results):
		print(f.result())
	

finish = time.perf_counter()

print(f'Finished in {round(finish-start, 2)} second(s)')




using map:
---------
import concurrent.futures
import time

start = time.perf_counter()


def do_something(seconds):
    print(f'Sleeping {seconds} second(s)...')
    time.sleep(seconds)
    return f'Done Sleeping...{seconds}'


with concurrent.futures.ProcessPoolExecutor() as executor:
    secs = [5, 4, 3, 2, 1]
    results = executor.map(do_something, secs)
	
	for result in results:
		print(result)


finish = time.perf_counter()

print(f'Finished in {round(finish-start, 2)} second(s)')



Multiprocessing example:
------------------------

import time
import concurrent.futures
from PIL import Image, ImageFilter

img_names = [
    'photo-1516117172878-fd2c41f4a759.jpg',
    'photo-1532009324734-20a7a5813719.jpg',
    'photo-1524429656589-6633a470097c.jpg',
    'photo-1530224264768-7ff8c1789d79.jpg',
    'photo-1564135624576-c5c88640f235.jpg',
    'photo-1541698444083-023c97d3f4b6.jpg',
    'photo-1522364723953-452d3431c267.jpg',
    'photo-1513938709626-033611b8cc03.jpg',
    'photo-1507143550189-fed454f93097.jpg',
    'photo-1493976040374-85c8e12f0c0e.jpg',
    'photo-1504198453319-5ce911bafcde.jpg',
    'photo-1530122037265-a5f1f91d3b99.jpg',
    'photo-1516972810927-80185027ca84.jpg',
    'photo-1550439062-609e1531270e.jpg',
    'photo-1549692520-acc6669e2f0c.jpg'
]

t1 = time.perf_counter()

size = (1200, 1200)


def process_image(img_name):
    img = Image.open(img_name)

    img = img.filter(ImageFilter.GaussianBlur(15))

    img.thumbnail(size)
    img.save(f'processed/{img_name}')
    print(f'{img_name} was processed...')


with concurrent.futures.ProcessPoolExecutor() as executor:
    executor.map(process_image, img_names)


t2 = time.perf_counter()

print(f'Finished in {t2-t1} seconds')
======================================================================================================================================================================================