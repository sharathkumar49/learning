Python Collections:
-------------------
Python Collections (Arrays)
There are four collection data types in the Python programming language:

List is a collection which is ordered and changeable/mutable. Allows duplicate members. Indexed
Tuple is a collection which is ordered and unchangeable. Allows duplicate members.
Set is a collection which is unordered, unchangeable*, and unindexed. No duplicate members.
Dictionary is a collection which is ordered** and changeable. No duplicate members.
*Set items are unchangeable, but you can remove and/or add items whenever you like.

**As of Python version 3.7, dictionaries are ordered. In Python 3.6 and earlier, dictionaries are unordered.

When choosing a collection type, it is useful to understand the properties of that type. Choosing the right type for a 
particular data set could mean retention of meaning, and, it could mean an increase in efficiency or security.



Lists:
------
thislist = ["apple", "banana", "cherry"]  
If you add new items to a list, the new items will be placed at the end of the list.
print(len(thislist))
print(type(mylist))
thislist = list(("apple", "banana", "cherry")) # note the double round-brackets

Access List Items:
------------------
print(thislist[1])
print(thislist[-1])
print(thislist[2:5])    The search will start at index 2 (included) and end at index 5 (not included).
print(thislist[:4])    By leaving out the start value, the range will start at the first item:
print(thislist[2:])    By leaving out the end value, the range will go on to the end of the list:

Change item value:
-------------------
thislist[1] = "blackcurrant"
thislist = ["apple", "banana", "cherry", "orange", "kiwi", "mango"]
thislist[1:3] = ["blackcurrant", "watermelon"]   --> ['apple', 'blackcurrant', 'watermelon', 'orange', 'kiwi', 'mango']
(Remember in the index, it accepts initial value 1  and ignores the last value 3)
(so 1 and 2 only will be considered)  --> which means replacing 2 values with 2 values in the list
thislist[1:5] = ["blackcurrant", "watermelon"] --> replacing the values in the position (1, 2, 3, 4) with the values 
blackcurrant and watermelon which gives us ['apple', 'blackcurrant', 'watermelon', 'mango']
Now, thislist[1:4] = ["blackcurrant", "watermelon", "strawberry", "grape", "guava", "pineapple"], replacing the values in the
position 1, 2, 3, with 6 values --> ['apple', 'blackcurrant', 'watermelon', 'strawberry', 'grape', 'guava', 'pineapple', 'kiwi', 'mango']


Append Items:
-------------
thislist.append("orange")    Using the append() method to append an item:  #will insert at the last
thislist.insert(1, "orange")   The insert() method inserts an item at the specified index:
thislist.extend(tropical)    To append elements from another list to the current list, use the extend() method.
The extend() method does not have to append lists, you can add any iterable object (tuples, sets, dictionaries etc.).

Remove list items:
------------------
The remove() method removes the specified item.
The pop() method removes the specified index. If you do not specify the index, the pop() method removes the last item.
thislist.pop(1)    thislist.pop()
The del keyword also removes the specified index:   del thislist[0]
The del keyword can also delete the list completely.    del thislist
The clear() method empties the list. The list still remains, but it has no content.   thislist.clear()


Loop lists:
-----------
1. You can loop through the list items by using a for loop:
thislist = ["apple", "banana", "cherry"]
for x in thislist:
  print(x)

2. You can also loop through the list items by referring to their index number.
Use the range() and len() functions to create a suitable iterable.
thislist = ["apple", "banana", "cherry"]
for i in range(len(thislist)):     The iterable created in the example is [0, 1, 2].
  print(thislist[i])


List Comprehension:
--------------------

newlist = [expression for item in iterable if condition == True]


Sort Lists:
----------
List objects have a sort() method that will sort the list alphanumerically, ascending, by default: thislist.sort()
To sort descending, use the keyword argument reverse = True: thislist.sort(reverse = True)	