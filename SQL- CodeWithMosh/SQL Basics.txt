

The SELECT TOP clause is used to specify the number of records to return.

The SELECT TOP clause is useful on large tables with thousands of records. Returning a large number of records can impact performance.

ExampleGet your own SQL Server
Select only the first 3 records of the Customers table:

SELECT TOP 3 * FROM Customers;

SELECT * FROM Customers
LIMIT 3;




SELECT TOP 50 PERCENT * FROM Customers;


SQL INNER JOIN
===============
The INNER JOIN keyword selects records that have matching values in both tables.

JOIN and INNER JOIN will return the same result.


Sol:
Let's look at a selection of the Products table:

ProductID	ProductName	CategoryID	Price
1	Chais	1	18
2	Chang	1	19
3	Aniseed Syrup	2	10

And a selection of the Categories table:

CategoryID	CategoryName	Description
1	Beverages	Soft drinks, coffees, teas, beers, and ales
2	Condiments	Sweet and savory sauces, relishes, spreads, and seasonings
3	Confections	Desserts, candies, and sweet breads

We will join the Products table with the Categories table, by using the CategoryID field from both tables:

ExampleGet your own SQL Server
Join Products and Categories with the INNER JOIN keyword:

SELECT ProductID, ProductName, CategoryName
FROM Products
INNER JOIN Categories ON Products.CategoryID = Categories.CategoryID;


SQL LEFT JOIN Keyword
======================
The LEFT JOIN keyword returns all records from the left table (table1), and the matching records from the right table (table2). The result is 0 records from the right side, if there is no match.

SOL:
SELECT column_name(s)
FROM table1
LEFT JOIN table2
ON table1.column_name = table2.column_name;


SQL RIGHT JOIN Keyword
=======================
The RIGHT JOIN keyword returns all records from the right table (table2), and the matching records from the left table (table1). The result is 0 records from the left side, if there is no match.

SOl:
SELECT column_name(s)
FROM table1
RIGHT JOIN table2
ON table1.column_name = table2.column_name;


SQL FULL OUTER JOIN Keyword
============================
The FULL OUTER JOIN keyword returns all records when there is a match in left (table1) or right (table2) table records.

Tip: FULL OUTER JOIN and FULL JOIN are the same.

Sol:
SELECT column_name(s)
FROM table1
FULL OUTER JOIN table2
ON table1.column_name = table2.column_name
WHERE condition;


SQL Self Join
==============
A self join is a regular join, but the table is joined with itself.

Sol:
SELECT column_name(s)
FROM table1 T1, table1 T2
WHERE condition;

SELECT A.CustomerName AS CustomerName1, B.CustomerName AS CustomerName2, A.City
FROM Customers A, Customers B
WHERE A.CustomerID <> B.CustomerID
AND A.City = B.City
ORDER BY A.City;

<> -> Not equal to



The SQL UNION Operator
========================
The UNION operator is used to combine the result-set of two or more SELECT statements.

Every SELECT statement within UNION must have the same number of columns
The columns must also have similar data types
The columns in every SELECT statement must also be in the same order
UNION Syntax
=============
SELECT column_name(s) FROM table1
UNION
SELECT column_name(s) FROM table2;

UNION ALL Syntax
==================
The UNION operator selects only distinct values by default. To allow duplicate values, use UNION ALL:

SELECT column_name(s) FROM table1
UNION ALL
SELECT column_name(s) FROM table2;


The SQL HAVING Clause
=======================
The HAVING clause was added to SQL because the WHERE keyword cannot be used with aggregate functions.

HAVING Syntax
==============
SELECT column_name(s)
FROM table_name
WHERE condition
GROUP BY column_name(s)
HAVING condition
ORDER BY column_name(s);


The following SQL statement lists the number of customers in each country, sorted high to low (Only include countries with more than 5 customers):

Example
SELECT COUNT(CustomerID), Country
FROM Customers
GROUP BY Country
HAVING COUNT(CustomerID) > 5
ORDER BY COUNT(CustomerID) DESC;


EXISTS
=======
The EXISTS operator is used to test for the existence of any record in a subquery.

The EXISTS operator returns TRUE if the subquery returns one or more records.

EXISTS Syntax
---------------
SELECT column_name(s)
FROM table_name
WHERE EXISTS
(SELECT column_name FROM table_name WHERE condition);


SELECT INTO 
============
The SELECT INTO statement copies data from one table into a new table.

Copy all columns into a new table:

SELECT *
INTO newtable [IN externaldb]
FROM oldtable
WHERE condition;


Creates a new table and copies data into it from an existing table.

You do not need to create the destination table first.



The SQL INSERT INTO SELECT Statement
=====================================
The INSERT INTO SELECT statement copies data from one table and inserts it into another table.

The INSERT INTO SELECT statement requires that the data types in source and target tables match.

Note: The existing records in the target table are unaffected.

INSERT INTO SELECT Syntax
Copy all columns from one table to another table:

INSERT INTO table2
SELECT * FROM table1
WHERE condition;

Inserts data into an existing table from another table.

The destination table must already exist.


The SQL CASE Expression
========================
The CASE expression goes through conditions and returns a value when the first condition is met (like an if-then-else statement). So, once a condition is true, it will stop reading and return the result. If no conditions are true, it returns the value in the ELSE clause.

If there is no ELSE part and no conditions are true, it returns NULL.

CASE Syntax
CASE
    WHEN condition1 THEN result1
    WHEN condition2 THEN result2
    WHEN conditionN THEN resultN
    ELSE result
END;


1. What is SQL and what are its types?
Answer:
SQL (Structured Query Language) is used to communicate with databases.
Types:

DDL (Data Definition Language): CREATE, ALTER, DROP

DML (Data Manipulation Language): INSERT, UPDATE, DELETE

DQL (Data Query Language): SELECT

TCL (Transaction Control Language): COMMIT, ROLLBACK, SAVEPOINT

DCL (Data Control Language): GRANT, REVOKE

2. What is the difference between WHERE and HAVING?
Answer:

WHERE filters rows before aggregation.

HAVING filters after aggregation.
Example:

SELECT department, COUNT(*)  
FROM employees  
WHERE status = 'active'  
GROUP BY department  
HAVING COUNT(*) > 5;

3. What is the difference between INNER JOIN and LEFT JOIN?
Answer:

INNER JOIN: returns matching rows from both tables.

LEFT JOIN: returns all rows from the left table and matching rows from the right table; NULLs for non-matches.

4. How do you find duplicate records in a table?
Answer:

SELECT name, COUNT(*)  
FROM employees  
GROUP BY name  
HAVING COUNT(*) > 1;


TO DELETE the duplicates
=========================
DELETE FROM Orders
WHERE order_id NOT IN (
    SELECT MIN(order_id)
    FROM Orders
    GROUP BY item, amount
);


5. Write a query to fetch the second highest salary from a table.
Answer:

SELECT MAX(salary)  
FROM employees  
WHERE salary < (SELECT MAX(salary) FROM employees);

(OR)

SELECT DISTINCT salary 
FROM employees 
ORDER BY salary DESC 
LIMIT 1 OFFSET 1;


6. What are constraints in SQL?
Answer:
Constraints enforce rules on data. Examples:

NOT NULL – No NULLs allowed

UNIQUE – Unique values only

PRIMARY KEY – Uniquely identifies each row

FOREIGN KEY – Enforces referential integrity

CHECK – Ensures a condition is met

7. What is the difference between DELETE, TRUNCATE, and DROP?
Answer:

DELETE: removes rows, can be rolled back.

TRUNCATE: removes all rows, faster, cannot be rolled back in most cases.

DROP: removes entire table structure and data.

8. Explain GROUP BY with an example.
Answer:

SELECT department, COUNT(*)  
FROM employees  
GROUP BY department;

This groups employees by department and returns the number in each.

9. What is a primary key and a foreign key?
Answer:

Primary Key: uniquely identifies each row in a table.

Foreign Key: a field that references a primary key in another table.

10. What is indexing?
Answer:
Indexes speed up query performance by allowing quick data retrieval.
Types:

Clustered Index: sorts and stores data rows in order.

Non-clustered Index: stores pointers to the data.


11. Write a query to get department-wise average salary and filter those having avg salary > 50,000.
Answer:

SELECT department_id, AVG(salary) AS avg_salary
FROM employees
GROUP BY department_id
HAVING AVG(salary) > 50000;

12. How does normalization work? What are the different normal forms?
Answer:
Normalization is the process of organizing data to reduce redundancy and improve integrity.
Normal Forms:

1NF: Eliminate repeating groups; ensure atomicity.

2NF: Remove partial dependencies.

3NF: Remove transitive dependencies.

BCNF: Every determinant must be a candidate key.

Higher forms: 4NF, 5NF for more complex cases.

13. What is a correlated subquery?
Answer:
A correlated subquery is a subquery that uses values from the outer query. It runs once for each row selected by the outer query.
Example:


SELECT e1.name
FROM employees e1
WHERE salary > (
  SELECT AVG(salary)
  FROM employees e2
  WHERE e1.department_id = e2.department_id
);
14. What is the use of COALESCE() and NULLIF()?
Answer:

COALESCE(a, b, c) returns the first non-null value among a, b, c.

NULLIF(a, b) returns NULL if a = b; otherwise, returns a.

15. Explain window functions with an example.
Answer:
Window functions perform calculations across a set of rows related to the current row.
Example:

SELECT name, department_id, salary,
       RANK() OVER (PARTITION BY department_id ORDER BY salary DESC) AS rank
FROM employees;

16. What is a CTE (Common Table Expression)?
Answer:
A CTE is a temporary result set that can be referred to within a SELECT, INSERT, UPDATE, or DELETE statement.
Example:

WITH dept_avg AS (
  SELECT department_id, AVG(salary) AS avg_sal
  FROM employees
  GROUP BY department_id
)
SELECT *
FROM dept_avg
WHERE avg_sal > 50000;

17. Difference between UNION and UNION ALL.
Answer:

UNION: Removes duplicates between result sets.

UNION ALL: Includes all duplicates.

18. Write a query to transpose rows into columns.
Answer (using CASE):

SELECT
  employee_id,
  MAX(CASE WHEN month = 'Jan' THEN salary END) AS Jan,
  MAX(CASE WHEN month = 'Feb' THEN salary END) AS Feb
FROM salary_data
GROUP BY employee_id;

19. How do you optimize a slow-running SQL query?
Answer:

Use indexes on columns used in WHERE, JOIN, and ORDER BY.

Avoid SELECT *.

Use proper joins instead of subqueries where possible.

Analyze query execution plan.

Remove unnecessary sorting or grouping.

20. Explain ACID properties in the context of SQL transactions.
Answer:

Atomicity: All operations in a transaction are completed or none.

Consistency: Transaction must leave the DB in a valid state.

Isolation: Transactions don’t interfere with each other.

Durability: Committed changes are permanent even after a crash.

21. Given a table of employee attendance, how would you calculate the number of working days per employee in a month?
Answer:
Assuming table attendance(emp_id, att_date, status) where status = 'Present':

SELECT emp_id, COUNT(*) AS working_days
FROM attendance
WHERE status = 'Present'
  AND att_date BETWEEN '2024-04-01' AND '2024-04-30'
GROUP BY emp_id;


Query to delete the duplicates from the table
===============================================

Earlier
--------
| id | name  | email                                         |
| -- | ----- | --------------------------------------------- |
| 1  | Alice | [alice@example.com](mailto:alice@example.com) |
| 2  | Bob   | [bob@example.com](mailto:bob@example.com)     |
| 3  | Alice | [alice@example.com](mailto:alice@example.com) |
| 4  | Carol | [carol@example.com](mailto:carol@example.com) |
| 5  | Bob   | [bob@example.com](mailto:bob@example.com)     |
| 6  | Alice | [alice@example.com](mailto:alice@example.com) |


SOLUTION
=========

DELETE FROM my_table
WHERE id NOT IN (
    SELECT MIN(id)
    FROM my_table
    GROUP BY name, email
);


After
------
| id | name  | email                                         |
| -- | ----- | --------------------------------------------- |
| 1  | Alice | [alice@example.com](mailto:alice@example.com) |
| 2  | Bob   | [bob@example.com](mailto:bob@example.com)     |
| 4  | Carol | [carol@example.com](mailto:carol@example.com) |



->COUNT(*) — Counts All Rows
Counts every row, regardless of NULLs.

Includes rows where all columns might be NULL.


SELECT COUNT(*) FROM Orders;
→ Returns the total number of rows in the table.

->COUNT(column_name) — Counts Non-NULL Values Only
Counts only the rows where the specified column is NOT NULL.

Ignores rows where column_name is NULL.


SELECT COUNT(customer_id) FROM Orders;
→ Returns the number of rows where customer_id is not NULL.


✅ CHAR(n) — Fixed-Length Character String
Always uses exactly n characters.

If the string is shorter than n, it's padded with spaces on the right.

Slightly faster for fixed-length data (like country codes: US, IN, UK).


CHAR(5)
-- 'abc' is stored as 'abc  '
✅ VARCHAR(n) — Variable-Length Character String
Stores strings up to n characters, but only uses as much space as needed.

No padding is added.

More space-efficient for strings of varying length.


VARCHAR(5)
-- 'abc' is stored as 'abc'


=======================================================================

Write a query to find employees who earn more than the average salary.

SOL:
SELECT name
FROM employees
WHERE salary > (
    SELECT AVG(salary)
    FROM Employees
);


=======================================================================
How do you get a list of duplicate records from a table?

SOL:
SELECT name, COUNT(*)
FROM Employees
GROUP BY name
HAVING COUNT(*) > 1;

=======================================================================
What is the purpose of CASE statements in SQL? Provide an example.

The CASE statement in SQL is used to implement conditional logic directly in SQL queries. It allows you to create conditional expressions that can be used to return different values depending on certain conditions, similar to if-else logic in programming languages.

SOL:
SELECT name, salary,
       CASE
           WHEN salary < 50000 THEN 'Low Salary'
           WHEN salary BETWEEN 50000 AND 100000 THEN 'Medium Salary'
           WHEN salary > 100000 THEN 'High Salary'
           ELSE 'Unknown'
       END AS salary_category
FROM Employees;

OUTPUT:
| name        | salary | salary\_category |
| ----------- | ------ | ---------------- |
| Alice Brown | 50000  | Medium Salary    |
| Bob Smith   | 75000  | Medium Salary    |
| Carol Jones | 65000  | Medium Salary    |
| David Green | 120000 | High Salary      |
| Eva Wilson  | 40000  | Low Salary       |

=======================================================================

How do you find the number of rows in a table?

SOL:
1. Count rows with a condition:

SELECT COUNT(*) 
FROM Employee
WHERE Department = 'Sales';

➡️ Counts only employees in the Sales department.

2. Count non-null values in a specific column:

SELECT COUNT(Salary) 
FROM Employee;

➡️ Counts only rows where Salary is not NULL.


=======================================================================
✅ 1. Select All Columns from a Table

SELECT * FROM employees;

✅ 2. Select Specific Columns

SELECT name, salary FROM employees;

✅ 3. Filtering Records with WHERE Clause

SELECT * FROM employees
WHERE department = 'Sales';

✅ 4. Sorting Records with ORDER BY

SELECT * FROM employees
ORDER BY salary DESC;

✅ 5. Using DISTINCT to Remove Duplicates

SELECT DISTINCT department FROM employees;

✅ 6. Using GROUP BY and COUNT()

SELECT department, COUNT(*) AS num_employees
FROM employees
GROUP BY department;

✅ 7. Filtering Grouped Results with HAVING

SELECT department, COUNT(*) AS num_employees
FROM employees
GROUP BY department
HAVING COUNT(*) > 5;

✅ 8. Get the Number of Rows in a Table

SELECT COUNT(*) FROM employees;

✅ 9. Using LIKE for Pattern Matching

SELECT * FROM employees
WHERE name LIKE 'A%'; -- names starting with A

✅ 10. Using IN and BETWEEN

SELECT * FROM employees
WHERE department IN ('Sales', 'IT');

SELECT * FROM employees
WHERE salary BETWEEN 30000 AND 50000;


✅ 11. Inner Join Between Two Tables

SELECT e.name, d.department_name
FROM employees e
INNER JOIN departments d
ON e.department_id = d.id;

✅ 12. Finding NULL Values

SELECT * FROM employees
WHERE manager_id IS NULL;

✅ 13. Aggregate Functions

SELECT AVG(salary) AS average_salary FROM employees;

✅ 14. Find the Maximum/Minimum Salary

SELECT MAX(salary) AS max_salary FROM employees;

✅ 15. Update a Record

UPDATE employees
SET salary = salary + 1000
WHERE id = 101;

✅ 16. Delete a Record

DELETE FROM employees
WHERE id = 101;

✅ 17. Insert a New Record

INSERT INTO employees (name, department, salary)
VALUES ('John Doe', 'IT', 45000);

✅ 18. Get the Second Highest Salary (Popular Interview Q)

SELECT MAX(salary) AS second_highest_salary
FROM employees
WHERE salary < (
    SELECT MAX(salary) FROM employees
);

✅ 19. Get All Employees Without a Department

SELECT * FROM employees
WHERE department_id IS NULL;

✅ 20. Simple Subquery

SELECT name FROM employees
WHERE salary > (SELECT AVG(salary) FROM employees);


Write an SQL query to retrieve the first_name, last_name, and salary of employees who earn more than the average salary.

SOL:

SELECT first_name, last_name, salary
FROM employees
WHERE salary > (
    SELECT AVG(salary)
    FROM employees
);


Write a query to get the employee(s) with the highest salary in each department.
=================================================================================

SOL:

SELECT e.name, e.dpt_id, e.salary
FROM employees e
WHERE e.salary = (
    SELECT MAX(salary)
    FROM employees
    WHERE dpt_id = e.dpt_id
);


What are window functions in SQL? Can you give an example using the RANK() function?
=====================================================================================

SOL:

What are Window Functions?
Window functions perform calculations across a set of table rows related to the current row.

Unlike GROUP BY which collapses rows, window functions preserve all rows and add extra info like rankings, running totals, etc.

Useful for ranking, running sums, moving averages, and more.

Example: Using RANK() to rank employees by salary within each department

SELECT
  name,
  dpt_id,
  salary,
  RANK() OVER (PARTITION BY dpt_id ORDER BY salary DESC) AS salary_rank
FROM employees;


Write a query to fetch the top 3 highest paid employees per department.
========================================================================
SELECT name, dpt_id, salary
FROM (
  SELECT *,
         RANK() OVER (PARTITION BY dpt_id ORDER BY salary DESC) AS rnk
  FROM employees
) ranked_employees
WHERE rnk <= 3;


Given a table of employee clock-in and clock-out times, write a query to calculate the total number of hours each employee worked per day.
===========================================================================================================================================

SELECT 
  emp_id,
  work_date,
  TIMESTAMPDIFF(MINUTE, clock_in, clock_out) / 60 AS hours_worked
FROM employee_attendance;


Write a query to find the total quantity sold for each product in the last 30 days.
====================================================================================
SELECT product_id, SUM(quantity) AS total_quantity
FROM sales
WHERE sale_date >= CURRENT_DATE - INTERVAL '30 days'
GROUP BY product_id;


Write a query to find users who made more than 3 transactions in a single day.
==============================================================================
SELECT user_id, txn_date, COUNT(*) AS num_of_trans
FROM transactions
GROUP BY user_id, txn_date
HAVING COUNT(*) > 3;


Write a query to find the first order placed by each customer.
================================================================
SELECT o1.order_id, o1.customer_id, o1.order_date
FROM orders o1
WHERE o1.order_date = (
  SELECT MIN(o2.order_date)
  FROM orders o2
  WHERE o2.customer_id = o1.customer_id
);



| Function          | What it does                                                            | Example behavior (on values: 100, 90, 90, 80) |
| ----------------- | ----------------------------------------------------------------------- | --------------------------------------------- |
| **ROW\_NUMBER()** | Assigns a **unique sequential number** to each row, even if values tie. | 1, 2, 3, 4                                    |
| **RANK()**        | Assigns the same rank to ties but **skips ranks** after ties.           | 1, 2, 2, 4                                    |
| **DENSE\_RANK()** | Assigns the same rank to ties, **does not skip ranks** after ties.      | 1, 2, 2, 3                                    |




                                                                                            STORED PROCEDURE
                                                                                           ===================
A stored procedure is group of T-SQL (Transact SQL) statements. If you have a situation, where you write the same query over and over again, you can save that specific query as a stored procedure and call it just by it's name.

Creating a simple stored procedure without any parameters: This stored procedure, retrieves Name and Gender of all the employees. To create a stored procedure we use, CREATE PROCEDURE or CREATE PROC statement.

CREATE Without any Parameters
===============================
Create Procedure spGetEmployees
as
Begin
  Select Name, Gender from tblEmployee
End

Note: When naming user defined stored procedures, Microsoft recommends not to use "sp_" as a prefix. All system stored procedures, are prefixed with "sp_". This avoids any ambiguity between user defined and system stored procedures and any conflicts, with some future system procedure.

To execute the stored procedure, you can just type the procedure name and press F5, or use EXEC or EXECUTE keywords followed by the procedure name as shown below.
1. spGetEmployees
2. EXEC spGetEmployees
3. Execute spGetEmployees

Creating a stored procedure with input parameters: This SP, accepts GENDER and DEPARTMENTID parameters. Parameters and variables have an @ prefix in their name.

CREATE With Input Parameters
==============================
Create Procedure spGetEmployeesByGenderAndDepartment 
@Gender nvarchar(50),
@DepartmentId int
as
Begin
  Select Name, Gender from tblEmployee Where Gender = @Gender and DepartmentId = @DepartmentId
End


To invoke this procedure, we need to pass the value for @Gender and @DepartmentId parameters. If you don't specify the name of the parameters, you have to first pass value for @Gender parameter and then for @DepartmentId.

EXECUTE spGetEmployeesByGenderAndDepartment 'Male', 1

On the other hand, if you change the order, you will get an error stating "Error converting data type varchar to int." This is because, the value of "Male" is passed into @DepartmentId parameter. Since @DepartmentId is an integer, we get the type conversion error.

spGetEmployeesByGenderAndDepartment 1, 'Male'

When you specify the names of the parameters when executing the stored procedure the order doesn't matter.

EXECUTE spGetEmployeesByGenderAndDepartment @DepartmentId=1, @Gender = 'Male'

Create Procedure spGetEmployeesByGenderAndDepartment 
@Gender nvarchar(50),
@DepartmentId int
as
Begin
  Select Name, Gender from tblEmployee Where Gender = @Gender and DepartmentId = @DepartmentId
End

TO ALTER THE STORED PROCEDURE
===============================
Alter Procedure spGetEmployeesByGenderAndDepartment 
@Gender nvarchar(50),
@DepartmentId int
as
Begin
  Select Name, Gender from tblEmployee Where Gender = @Gender and DepartmentId = @DepartmentId order by Name
End


To encrypt the text of the SP, use WITH ENCRYPTION option. Once, encrypted, you cannot view the text of the procedure, using sp_helptext system stored procedure. There are ways to obtain the original text, which we will talk about in a later session.

TO ENCRYPT
===========
Alter Procedure spGetEmployeesByGenderAndDepartment 
@Gender nvarchar(50),
@DepartmentId int
WITH ENCRYPTION
as
Begin
  Select Name, Gender from tblEmployee Where Gender = @Gender and DepartmentId = @DepartmentId
End

To delete the SP, use DROP PROC 'SPName' or DROP PROCEDURE 'SPName'


Stored procedures with output parameters 
=========================================

To create an SP with output parameter, we use the keywords OUT or OUTPUT. @EmployeeCount is an OUTPUT parameter. Notice, it is specified with OUTPUT keyword. 
Create Procedure spGetEmployeeCountByGender
@Gender nvarchar(20),
@EmployeeCount int Output
as
Begin
 Select @EmployeeCount = COUNT(Id) 
 from tblEmployee 
 where Gender = @Gender
End

To execute this stored procedure with OUTPUT parameter

1. First initialise a variable of the same datatype as that of the output parameter. We have declared @EmployeeTotal integer variable. 
2. Then pass the @EmployeeTotal variable to the SP. You have to specify the OUTPUT keyword. If you don't specify the OUTPUT keyword, the variable will be NULL. 
3. Execute

Declare @EmployeeTotal int
Execute spGetEmployeeCountByGender 'Female', @EmployeeTotal output
Print @EmployeeTotal

If you don't specify the OUTPUT keyword, when executing the stored procedure, the @EmployeeTotal variable will be NULL. Here, we have not specified OUTPUT keyword. When you execute, you will see '@EmployeeTotal is null' printed.

Declare @EmployeeTotal int
Execute spGetEmployeeCountByGender 'Female', @EmployeeTotal
if(@EmployeeTotal is null)
 Print '@EmployeeTotal is null'
else
 Print '@EmployeeTotal is not null'

You can pass parameters in any order, when you use the parameter names. Here, we are first passing the OUTPUT parameter and then the input @Gender parameter.

Declare @EmployeeTotal int
Execute spGetEmployeeCountByGender @EmployeeCount = @EmployeeTotal OUT, @Gender = 'Male'
Print @EmployeeTotal

The following system stored procedures, are extremely useful when working procedures.
sp_help SP_Name : View the information about the stored procedure, like parameter names, their datatypes etc. sp_help can be used with any database object, like tables, views, SP's, triggers etc. Alternatively, you can also press ALT+F1, when the name of the object is highlighted.

sp_helptext SP_Name : View the Text of the stored procedure

sp_depends SP_Name : View the dependencies of the stored procedure. This system SP is very useful, especially if you want to check, if there are any stored procedures that are referencing a table that you are abput to drop. sp_depends can also be used with other database objects like table etc.

Note: All parameter and variable names in SQL server, need to have the @symbol.


Stored procedure output parameters or return values
====================================================
What are stored procedure status variables?
Whenever, you execute a stored procedure, it returns an integer status variable. Usually, zero indicates success, and non-zero indicates failure. To see this yourself, execute any stored procedure from the object explorer, in sql server management studio. 
1. Right Click and select 'Execute Stored Procedure
2. If the procedure, expects parameters, provide the values and click OK.
3. Along with the result that you expect, the stored procedure, also returns a Return Value = 0

So, from this we understood that, when a stored procedure is executed, it returns an integer status variable. With this in mind, let's understand the difference between output parameters and RETURN values.

The following procedure returns total number of employees in the Employees table, using output parameter - @TotalCount.
Create Procedure spGetTotalCountOfEmployees1
@TotalCount int output
as
Begin
 Select @TotalCount = COUNT(ID) from tblEmployee
End

Executing spGetTotalCountOfEmployees1 returns 3.
Declare @TotalEmployees int
Execute spGetTotalCountOfEmployees @TotalEmployees Output
Select @TotalEmployees

Re-written stored procedure using return variables
Create Procedure spGetTotalCountOfEmployees2
as
Begin
 return (Select COUNT(ID) from Employees)
End

Executing spGetTotalCountOfEmployees2 returns 3.
Declare @TotalEmployees int
Execute @TotalEmployees = spGetTotalCountOfEmployees2
Select @TotalEmployees

So, we are able to achieve what we want, using output parameters as well as return values. Now, let's look at example, where return status variables cannot be used, but Output parameters can be used.

In this SP, we are retrieving the Name of the employee, based on their Id, using the output parameter @Name.
Create Procedure spGetNameById1
@Id int,
@Name nvarchar(20) Output
as
Begin
 Select @Name = Name from tblEmployee Where Id = @Id
End

Executing spGetNameById1, prints the name of the employee
Declare @EmployeeName nvarchar(20)
Execute spGetNameById1 3, @EmployeeName out
Print 'Name of the Employee = ' + @EmployeeName

Now let's try to achieve the same thing, using return status variables.
Create Procedure spGetNameById2
@Id int
as
Begin
 Return (Select Name from tblEmployee Where Id = @Id)
End

Executing spGetNameById2 returns an error stating 'Conversion failed when converting the nvarchar value 'Sam' to data type int.'. The return status variable is an integer, and hence, when we select Name of an employee and try to return that we get a converion error. 

Declare @EmployeeName nvarchar(20)
Execute @EmployeeName = spGetNameById2 1
Print 'Name of the Employee = ' + @EmployeeName

So, using return values, we can only return integers, and that too, only one integer. It is not possible, to return more than one value using return values, where as output parameters, can return any datatype and an sp can have more than one output parameters. I always prefer, using output parameters, over RETURN values.

In general, RETURN values are used to indicate success or failure of stored procedure, especially when we are dealing with nested stored procedures.Return a value of 0, indicates success, and any nonzero value indicates failure.


