

A tree data structure is a hierarchical structure commonly used to organize data in a way that reflects a parent-child relationship. Trees are incredibly useful in many computer science applications such as databases, file systems, and search algorithms. Here are some key terms and concepts related to trees:

Node: The basic unit of a tree, which contains data and links to other nodes.
Root: The top node of a tree. There is only one root node in a tree, and it has no parent.
Edge: The connection between two nodes. Each edge connects a parent node to its child node.
Parent: A node that has one or more child nodes.
Child: A node that is connected to a parent node.
Leaf: A node that has no children. It is also known as a terminal node.
Subtree: A tree consisting of a node and all its descendants.
Height: The length of the longest path from the root node to a leaf node.
Depth: The length of the path from a node to the root node. The root node has a depth of zero.
Level: Nodes that are at the same depth have the same level. The root node is at level zero.
Degree: The number of children a node has. The degree of a tree is the maximum degree of any node in the tree.
Binary Tree: A tree where each node has at most two children, commonly referred to as the left child and the right child.
Balanced Tree: A tree in which the height of the two subtrees of any node differ by at most one.





class TreeNode:
    def __init__(self, data):
        self.data = data
        self.children = []
        self.parent = None

    def get_level(self):
        level = 0
        p = self.parent
        while p:
            level += 1
            p = p.parent

        return level

    def print_tree(self):
        spaces = ' ' * self.get_level() * 3
        prefix = spaces + "|__" if self.parent else ""
        print(prefix + self.data)
        if self.children:
            for child in self.children:
                child.print_tree()

    def add_child(self, child):
        child.parent = self
        self.children.append(child)

def build_product_tree():
    root = TreeNode("Electronics")

    laptop = TreeNode("Laptop")
    laptop.add_child(TreeNode("Mac"))
    laptop.add_child(TreeNode("Surface"))
    laptop.add_child(TreeNode("Thinkpad"))

    cellphone = TreeNode("Cell Phone")
    cellphone.add_child(TreeNode("iPhone"))
    cellphone.add_child(TreeNode("Google Pixel"))
    cellphone.add_child(TreeNode("Vivo"))

    tv = TreeNode("TV")
    tv.add_child(TreeNode("Samsung"))
    tv.add_child(TreeNode("LG"))

    root.add_child(laptop)
    root.add_child(cellphone)
    root.add_child(tv)

    root.print_tree()

if __name__ == '__main__':
    build_product_tree()






















