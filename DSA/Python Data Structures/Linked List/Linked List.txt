
Linked List: 
-----------

Before stepping into Linked List, we need to look into few issues with arrays that linked list tries to solve


stock_prices = [298, 305, 320, 301, 292]

Here we have array of stock_prices and below is a memory layout of these stock prices 

0x00500 --> 298
0x00504 --> 305              
0x00508 --> 320           
0x0050A --> 301
0x0050F --> 292


And say for example, if you want to insert an element 284 at index position 1, then it will insert the element 284 at position 1 and it will swap or shift all elements. So, the complexity, array insertion = O(n) 


Now lets consider in the context of python list. Since python list is a dynamic array, initially it will assign some capacity(say 10) and when you start inserting elements one by one it will put those values in those reserved capacity of 10. Now say, you have already inserted 5 elements and want to insert new element(say 284) at index position 1. What happpens is, it will swap all those values starting from index 1 till end of an array to the next positions and then make space for 284. you can see that there are 4 copy operations happen for inserting an new element at index position 1. Imagine you have million elements in your array, now you have to do million swaps. This is one scenario. Another scenario is, consider the array is full of capacity, which means you have utilized all the 10 spaces and now you want to insert a new element, so as you know how the dynamic array works in this situation, it will create completely new memory location in RAM, allocating new capacity(current_capacity + curent_capacity * 2) and then it will copy all these elements one by one. So, Here the overhead is not only swapping the elements, but allocating new memory as well as copying all elements from your old memory area to new memory area. So, you can see that this is not efficient.


This is where linked list comes into rescue, where individual values are stored into different areas of memory, array stores value in contiguous memory location, whereas linked list data structure is storing values at random memory locations but these are linked by the pointers.

A linked list is a type of linear data structure similar to arrays. It is a collection of nodes that are linked with each other. A node contains two things first is data and second is a link that connects it with another node(the reference of next element).  And through these links, we can access the next element.


Now, say if you want to insert a new element, all you have to do is to modify the links. you don't need to copy values from one place to another place. All we have to do is, change the links of the respective elements.


Insert Element at beginning = O(1)
Delete Element at beginning = O(1)
Insert/Delete Element at the end = O(n) 


Benefits of linked list over an array: 
1. you don't need to pre-allocate space
2. Insertion is easier 


Linked list Traversal = O(n)
Accessing Element by value = O(n)



There is another flavour of linked list called doubly linked list where you not only have link to your next element, but also link to your previous element as well.  


Linked List Advantages:
1. Dynamic Size: They can grow or shrink in size more easily compared to arrays, which have a fixed size.
2. Efficient Insertions/Deletions: Adding or removing elements is more efficient because it does not require shifting other elements, as with arrays.
3. Memory Utilization: No predefined memory allocation needed, so memory is utilized as needed.


Doubly Linked List Advantages:
1. Bi-Directional Traversal: Can be traversed in both forward and backward directions, unlike singly linked lists which are only forward-traversable.
2. Better Flexibility: Each node points to both its next and previous nodes, making operations like deletion of a given node easier because you have access to the previous node as well.
3. Increased Complexity Handling: Can efficiently handle complex data structures like the implementation of certain types of caches (e.g., LRU Cache).




              Array       Linked List
		 
Indexing       O(1)          O(n)                  

the one advantage the array has over linked list is, if you know the index of your element in array, then the complexity is O(1) which is constant time operation, because if you want to access fifth element, you just use array with index of 5 and then you get that element. But in case of linked list, if you want to access the fifth element you have to go through all the elements until you reach the 5th element.


                                   Array               Linked List

Insert/Delete Element at start      O(n)                   O(1)

The complexity in array is O(n), because remember you have to copy those values. Whereas in Linked list, you don't have to.


                                   Array               Linked List

Insert/Delete Element at End      O(1)-amortized           O(n)


The reason for the complexity of array which is O(1)-amortized is,because if you have dynamic array and if you're reaching the capacity, you have to copy those elements. So there is some additional cost. The same operation in linked list is O(n)

                                   Array               Linked List

Insert Element in Middle        O(n)                      O(n)





Code: 

class Node:
    def __init__(self, data=None, next=None):
        self.data = data
        self.next = next

class LinkedList:
    def __init__(self):
        self.head = None

    def print(self):
        if self.head is None:
            print("Linked list is empty")
            return
        itr = self.head
        llstr = ''
        while itr:
            llstr += str(itr.data)+' --> ' if itr.next else str(itr.data)
            itr = itr.next
        print(llstr)

    def get_length(self):
        count = 0
        itr = self.head
        while itr:
            count+=1
            itr = itr.next

        return count

    def insert_at_begining(self, data):
        node = Node(data, self.head)
        self.head = node

    def insert_at_end(self, data):
        if self.head is None:
            self.head = Node(data, None)
            return

        itr = self.head

        while itr.next:
            itr = itr.next

        itr.next = Node(data, None)

    def insert_at(self, index, data):
        if index<0 or index>self.get_length():
            raise Exception("Invalid Index")

        if index==0:
            self.insert_at_begining(data)
            return

        count = 0
        itr = self.head
        while itr:
            if count == index - 1:   
						#if you're inserting, you need to modify the 'next' pointer of the previous element 
                node = Node(data, itr.next)
                itr.next = node
                break

            itr = itr.next
            count += 1

    def remove_at(self, index):
        if index<0 or index>=self.get_length():
            raise Exception("Invalid Index")

        if index==0:
            self.head = self.head.next
            return

        count = 0
        itr = self.head
        while itr:
            if count == index - 1:
				# you have to stop at the element which is prior to the element that you are trying to remove and in that element, you can modify the links
                itr.next = itr.next.next
                break

            itr = itr.next
            count+=1

    def insert_values(self, data_list):
        self.head = None
        for data in data_list:
            self.insert_at_end(data)


if __name__ == '__main__':
    ll = LinkedList()
    ll.insert_values(["banana","mango","grapes","orange"])
    ll.insert_at(1,"blueberry")
    ll.remove_at(2)
    ll.print()

    ll.insert_values([45,7,12,567,99])
    ll.insert_at_end(67)
    ll.print()
