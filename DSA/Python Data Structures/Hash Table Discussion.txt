

We are going to cover hash table in two videos. In the first video, which is this video, we'll be looking at what is hash table, the different big O complexities and we will implement hash table in Python. In the second video, we will look at how to handle collisions using chaining and linear probem and we'll do the implementation of those two different approaches. At the end of the second video, we will also have an interesting exercise for you. So make sure you watch both the videos and most importantly you do exercises at the end of video number two. Let's say you have stock prices data coming into this CSV file and here you have a date and the price of the stock on a given day. You want to write a program which can give you the price based on a day. Now, one way you can implement this is by writing this program. I have launched my Jupyter notebook and here I am reading the file and going through the lines one by one, splitting them by comma and then storing day and price into an array. So when I print the array, it looks something like this. It is a two dimensional array or a list where each of the element is another list where the zeroth element in that sub list is the day and the first element is the price. Now if you want to know what was the price on let's say March 9 then you can write a simple for loop saying for element in stock prices if element 0 is equal to March 9 then you have found your element so print element 1. So this program tells you that on March 9, the price was 302. While using a list works here, but it is not very efficient because imagine if your file size is, let's say, million records and the date that you are looking at is towards the end, then you have to run those many iterations. So the complexity of this program is order of n. To find a price based on a day, it is order of n complexity. In Python, there is dictionary which can do the same thing in order of one, which is a constant time operation. And let me show you how you can do that. So here. I'm going to copy the same code. And one change I'm making is replacing the list with a dictionary. So my stock prices is a dictionary now. And if it is a dictionary, you know, you can add a key by using this index operator and you can just say that thing is equal to price. OK. And when you print the dictionary, it looks something like this. where each of the days are key and then you have value as a price so now when you want to find a price on march 9, it is very simple you do this and it immediately gives you the price so you can compare array and a dictionary here and you can see that in this particular case using dictionary makes more sense because this operation is order of one now we are going to look into internal implementation of a dictionary So dictionary implements hash table. So hash table is the underlying data structure. And we will see how you can get order of one complexity for this search operation. When you store your data as two-dimensional list, in the memory, it will store something like this, where the first element is your day, then the second element is your price, and so on. OK, so these are like contiguous memory locations on your RAM. when you use dictionary on the other hand the way it will store this thing in ram is first let's say it will allocate a list of some size let's say a size of 10 and then it takes march 6 first somehow it will map march 6 to a specific element in the list. And to get the index of the element in that particular list, you use hash function and we will see what this has function is later on, but all the hash function is doing is converting your string key into an index into an array similarly you can apply hash function for all other keys find out an index into an array and store those elements at that index so it is that simple okay so if you think about it if you have an array usually you use integer index correct so let's say this is my array my integer index is zero two and so on. In HashMap, all you have is a string index. So for example, ultimately the effect that you're getting is you can use string index in your HashMap or Hashtable. By the way, sometimes people call it HashMap, Hashtable, they all are same. Hashtable, HashMap are internal data structure and dictionary is a Python specific implementation of Hashtable. So then the question arises is, how did you get number nine from March 6? So we use hash function. So what is this hash function? There are different ways of implementing hash function. I'm going to show you one way which is using ASCII numbers. So I will take each of these letters in this key. So you can see March 6 including the space by the way. For each of this letter I will find out the ASCII value. So here in the ASCII table you can see that the value of M here is 109. Similarly A here is 97. I added all this value into a sum, and since the size of my array is 10, if you want to get an index between 0 and 9, you all know from the mathematics that you can do mode operation. Mode operation is nothing but you are dividing 609 with 10, and the remainder that you get, which is 9, is your mode. So this is how you generate a 9 from March 6th as i said before you can use different type of hash function i just use this particular hash function okay so here in the hash map uh lookup by key is order of one on average similarly insertion and deletion is also order of one bigger complexity on average and we'll go into this into detail as well. So this is an average complexity, but on a worst case, it might be more than order of one. Here I have a list of classes available in different programming languages to implement hash table. In Python, the hash table implementation is called dictionary. Here is a code example. In java you have two classes hash map and linked hash map and this is how you create hash mapping linked hash map if you want to look at the differences you can google it i'm not gonna go in detail on that in c plus plus it is called std map so now let's implement hash map in python. First step of implementing hash table is writing your hash function. So here I have written the same hash function, which I showed you in a presentation, which will take a key, which is a string, and it goes through each of the characters. And this odd function will just find an ASCII value for that character. For example, we saw that m was 109. So if you do odd of m, you get 109, right? Similarly if you do a is 97 so this is giving you the ASCII value of a character so we are going through all these characters in your string doing the sum and that sum we are dividing by we are doing a mode using 100 so 100 is I am assuming that let's say 100 is the size of my list right in the presentation I use 10 as a size but here we are going to use 100 okay so what happens is when you call this function get hash on your key which is let's say march 6 you get uh this type of value okay so you can do uh different keys and you will get different hash values to implement hash table i'm going to create a class in python now if you don't know how to create class in python then you can watch my python tutorials i have tutorials on classes list dictionary and so on so i'm assuming you have those concepts clear okay. I created a hash table class where I have this array whose size is 100. And I'm initializing 100 elements in this array using list comprehension here. This is how you do list comprehension. And the value in each of these elements is none. Then I have same hash function which I created here. I already tested that function. So I'm just copy pasted. I have copy pasted that function here. Okay. So let's taste this class so far. So I have this class hash map and the way you can create an object of a class in Python is by doing this. Now you can do t dot get hash March 6 and see you're getting nine. okay so so far this looks good now we want to implement a function which can add an item into a hash map and get an item from the hash map okay so if you look at our stock prices example we have day and we have a price you want to add the day and price so it is like key value pair so you want to add a key value pair all right so for that reason i will define a function called add so key and value so you want to add a key value pair in your hash map so first thing you do is you get your hash so self dot get hash will give you for a given key it will give you that hash so the the way i intend to use this is i want to say add march 6 some value and then later on i want to say t dot get march 6 and it should retrieve me the same value which will be 130. So that's what I'm trying to do here. So I want to write add and get function. So in add, first I retrieved hash. So, you know, for my six, the hash will be nine. So I get this nine index into my array. And then all I do is self dot array edge. equal to value okay so let's run this by you can do ctrl enter to run this particular thing and let's execute this let's execute this okay this function is not defined okay So I want to do t dot array and just see what happened to my array. So if you look into it, you see there is 130 value. So at the location number nine. So if you count this, this is ninth location. It inserted value 130. When you now call get function, all you're doing is okay. So get function self and key. because forget all you're doing is you're calling it by key and you want to get 130 value so as usual the first step is to get the hash for that key which is March 6 so this H will be 9 and then you can just return that particular element so return self dot control enter this will execute this code again you have to do control enter here and then control enter here and now you got your value 130 so you see this is this is now working now here you are using add and get function wouldn't it be nice if you can do instead of add you do something like this you know how we did that with dictionary. If I have a way of doing something like this, which is something you do usually with your dictionary, that will be a little more convenient than calling add and get function. So luckily, Python supports this. So these are index operators or like item operators which you can override. Here I have Python documentation where it shows all the standard operators and here if you look at get item. So this particular function underscore underscore get item will give you this thing and underscore underscore set item. So there is a set item also this one will give you this functionality okay so all i'm doing is replacing add with set item and similarly underscore underscore get item get item underscore underscore so control enter execute it and now when i call this this guy here will call set item function so control enter so it works and control enter so see now this is pretty good so now let me add a bunch of values so march 7 so march first is let's say whatever okay i'm just adding a bunch of values here. Let's say December 17 and so on. And once I do that, I want to look at the status of my array. So t.array is this. You see March 6 got stored at this location. Let me just store something else, 27. So 20, which was March 1, got stored here, see? So hash function gives you these indexes and remaining values are none, but they got stored at different locations here. And when you call any of these values, you get that back. See March 1 is this, 17 is, okay. So there is no March 17, good. So it returned me none. See, when you do control enter, I don't get anything. But if I do December 17, I get 27 back.
so by writing this class what we did is we actually implemented a dictionary usually when you are doing programming you will be using dictionary you don't have to define this classes but by writing this class you get understanding of how dictionary works internally and you get a better idea on how hash table works as a data structure you can also define a delete item function so here you can have underscore underscore. let's see what is that function so delete item yeah this function see delete item so these are all standard python operators so i'm going to implement delete item function and i'm going to say okay delete an element with this particular key and first thing you do is get the hash for that key and in your array which is this you set that particular element to be none so control enter so that will execute this control enter again so i set all these values here t dot array so i see all these values are set see location number 9 is 130 now let me delete that so i can say delete T March 6 so what this should do is 130 value which is stored at location number 9 it should delete me means it should replace that with none okay so let's see if it is doing that so ctrl enter and then ctrl enter again so you see that value is gone now it's none okay great so we just implemented hash table using python now this is not handling collisions collisions is a very important concept that you need to know when you are working with hash hash table and that is something we are going to cover in the next video so make sure you watch part two of this video if you like this give it a thumbs up but yeah this class is not handling collisions collisions we are going to handle in the next video and in the next video at the end we will have a lot of interesting exercises for you as well. Thank you.

