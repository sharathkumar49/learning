

Binary Tree & Binary Search Tree (BST) – Comprehensive Notes:
1. Introduction

A Binary Tree is a hierarchical data structure in which each node has at most two children, referred to as the left child and the right child.

A Binary Search Tree (BST) is a special type of binary tree where the nodes are arranged in a specific order:
- The left subtree of a node contains only nodes with values less than the node’s value.
- The right subtree contains only nodes with values greater than the node’s value.
- No duplicate nodes are allowed.


2. Why Use Binary Trees?

- Efficient Searching: BSTs allow for fast lookup, addition, and removal of items (O(log n) on average).
- Hierarchical Data Representation: Useful for representing hierarchical data like file systems, organization structures, etc.
- Set Operations: Internally, sets and maps (dictionaries) can be implemented using BSTs.
- Sorted Data: In-order traversal of BST returns elements in sorted order.



3. Binary Tree Structure

      50
     /  \
   30    70
  / \   / \
20  40 60 80


- Each node has at most two children.
- The tree grows downward from the root node.



4. Binary Search Tree (BST) Properties

- Left < Root < Right: For any node, all values in the left subtree are less, and all in the right are greater.
- No Duplicates: Each element is unique.
- Recursive Structure: Each subtree is itself a BST.



5. Time Complexity

- Search: O(log n) (average), O(n) (worst case, e.g., skewed tree)
- Insertion: O(log n) (average)
- Deletion: O(log n) (average)
- Traversal: O(n)

Note: The efficiency depends on the tree being balanced. In the worst case (completely unbalanced), the tree becomes a linked list.





6. Traversal Techniques:

1. In-order Traversal (Left, Root, Right)
- Visits nodes in ascending order (for BST).
- Used to get sorted data from BST.

2. Pre-order Traversal (Root, Left, Right)
- Used to create a copy of the tree.
- Useful for prefix expression evaluation.

3. Post-order Traversal (Left, Right, Root)
- Used to delete the tree.
- Useful for postfix expression evaluation.

4. Breadth-First Search (BFS) / Level Order Traversal
- Visits nodes level by level.

Example Tree:

      15
     /  \
   12    27
  / \   /  \
 7  14 20  88
           \
           23




7. BST Operations – Code Examples

Node Definition:
'''python
class BinarySearchTreeNode:
    def __init__(self, data):
        self.data = data
        self.left = None
        self.right = None
'''



Insertion:
'''python
def add_child(self, data):
    if data == self.data:
        return  # No duplicates
    if data < self.data:
        if self.left:
            self.left.add_child(data)
        else:
            self.left = BinarySearchTreeNode(data)
    else:
        if self.right:
            self.right.add_child(data)
        else:
            self.right = BinarySearchTreeNode(data)
'''



Search:
'''python
def search(self, val):
    if self.data == val:
        return True
    if val < self.data:
        return self.left.search(val) if self.left else False
    return self.right.search(val) if self.right else False
'''

 
Traversals:
'''python
def in_order_traversal(self):
    elements = []
    if self.left:
        elements += self.left.in_order_traversal()
    elements.append(self.data)
    if self.right:
        elements += self.right.in_order_traversal()
    return elements

def pre_order_traversal(self):
    elements = [self.data]
    if self.left:
        elements += self.left.pre_order_traversal()
    if self.right:
        elements += self.right.pre_order_traversal()
    return elements

def post_order_traversal(self):
    elements = []
    if self.left:
        elements += self.left.post_order_traversal()
    if self.right:
        elements += self.right.post_order_traversal()
    elements.append(self.data)
    return elements
'''




Find Min/Max:
'''python
def find_min(self):
    return self.left.find_min() if self.left else self.data

def find_max(self):
    return self.right.find_max() if self.right else self.data
'''




Calculate Sum:
'''python
def calculate_sum(self):
    left_sum = self.left.calculate_sum() if self.left else 0
    right_sum = self.right.calculate_sum() if self.right else 0
    return self.data + left_sum + right_sum
'''




8. Building a BST
'''python
def build_tree(elements):
    root = BinarySearchTreeNode(elements[0])
    for i in range(1, len(elements)):
        root.add_child(elements[i])
    return root
'''




9. Example Usage
'''python
if __name__ == '__main__':
    numbers = [15, 12, 7, 14, 27, 20, 23, 88]
    numbers_tree = build_tree(numbers)
    print("Min:", numbers_tree.find_min())
    print("Max:", numbers_tree.find_max())
    print("Sum:", numbers_tree.calculate_sum())
    print("In order:", numbers_tree.in_order_traversal())
    print("Pre order:", numbers_tree.pre_order_traversal())
    print("Post order:", numbers_tree.post_order_traversal())
'''




10. Applications of Binary Trees

- Expression Trees: Used in compilers for parsing expressions.
- Priority Queues: Implemented using binary heaps (a type of binary tree).
- Huffman Encoding Tree: Used in data compression algorithms.
- Database Indexing: B-trees and their variants are used for indexing in databases.
- Routing Tables: Used in network routers.




11. Types of Binary Trees:
- Full Binary Tree: Every node has 0 or 2 children.
- Complete Binary Tree: All levels are completely filled except possibly the last, which is filled from left to right.
- Perfect Binary Tree: All internal nodes have two children and all leaves are at the same level.
- Balanced Binary Tree: The height of the left and right subtrees of every node differ by at most 1.
- Degenerate (or Pathological) Tree: Each parent node has only one child, making it look like a linked list.




12. Self-Balancing BSTs:
- AVL Tree: Balances itself after every insertion and deletion.
- Red-Black Tree: Used in many libraries (e.g., TreeMap in Java, std::map in C++).
- Splay Tree, Treap, etc.: Other variants for specific use-cases.




13. Pictorial Representation:


1. In-order Traversal (Left, Root, Right)
In-order: [7, 12, 14, 15, 20, 23, 27, 88]

2. Pre-order Traversal (Root, Left, Right)
Pre-order: [15, 12, 7, 14, 27, 20, 23, 88]

3. Post-order Traversal (Left, Right, Root)
Post-order: [7, 14, 12, 23, 20, 88, 27, 15]


Tree Diagram:


         15
        /  \
      12    27
     / \   /  \
    7  14 20  88
             \
             23




Traversal Paths Illustrated:
In-order (Left, Root, Right):
- Visit 7 → 12 → 14 → 15 → 20 → 23 → 27 → 88

Pre-order (Root, Left, Right):
- Visit 15 → 12 → 7 → 14 → 27 → 20 → 23 → 88

Post-order (Left, Right, Root):
- Visit 7 → 14 → 12 → 23 → 20 → 88 → 27 → 15






14. Key Points:
- BSTs are not always balanced. For optimal performance, use self-balancing trees.
- In-order traversal of BST gives sorted order.
- No duplicate elements in BST.
- Insertion, search, and deletion are efficient if the tree is balanced.



15. Additional Concepts:
- Deletion in BST: Three cases to handle:
  1. Node is a leaf (no children): Remove it.
  2. Node has one child: Replace node with its child.
  3. Node has two children: Replace node with its in-order successor (smallest in right subtree) or in-order predecessor (largest in left subtree).

- Height of a Binary Tree: Number of edges in longest path from root to a leaf.

- Balanced vs. Unbalanced Trees: Balanced trees maintain O(log n) operations, while unbalanced can degrade to O(n).



16. References
- [GeeksforGeeks – Binary Search Tree](https://www.geeksforgeeks.org/binary-search-tree-data-structure/)
- [Wikipedia – Binary Search Tree](https://en.wikipedia.org/wiki/Binary_search_tree)
- [Programiz – Binary Tree](https://www.programiz.com/dsa/binary-tree)


Summary:  
Binary trees and BSTs are fundamental data structures for efficient searching, sorting, and hierarchical data representation. Understanding their properties, operations, and applications is crucial for computer science and software engineering.

---------------------------------------------------------------------------------------------------------------------------------------------------------------------



Binary Search Tree (BST) Deletion – Detailed Notes

1. Introduction:
Deleting a node from a Binary Search Tree (BST) is more complex than insertion or searching because you must maintain the BST properties after deletion. There are three main cases to consider, depending on the node's children.



2. BST Deletion: The Three Cases:

Case 1: Deleting a Leaf Node (No Children)
- Definition: A leaf node is a node with no left or right child.
- How to delete: Simply remove the node from the tree.

Example:

    5
   / \
  3   7

If we delete node 3:

    5
     \
      7




Case 2: Deleting a Node with One Child
- Definition: The node has either a left child or a right child, but not both.
- How to delete: Remove the node and connect its parent directly to its child.

Example:

    5
   / \
  3   7
 /
2

If we delete node 3:

    5
   / \
  2   7




Case 3: Deleting a Node with Two Children
- Definition: The node has both left and right children.
- How to delete:  
  1. Find the node’s in-order successor (minimum value in the right subtree) or in-order predecessor (maximum value in the left subtree).
  2. Replace the node’s value with the successor/predecessor’s value.
  3. Delete the successor/predecessor node (which will now be a simpler case: leaf or one child).

Example:

    5
   / \
  3   7
 / \
2   4

If we delete node 3 (using in-order successor, which is 4):

    5
   / \
  4   7
 /
2




3. Why These Steps?
- Leaf node: No children, so just remove the reference.
- One child: Connect the parent directly to the child, maintaining the BST property.
- Two children: Replacing with in-order successor/predecessor ensures the BST property is preserved, as all left subtree values remain less and all right subtree values remain greater.






4. Visualizing the Deletion Cases:

Case 1: Leaf Node

Before:         After:
   4              4
  / \            /
 2   5          2
     |
    [6]  <- delete this leaf



Case 2: One Child

Before:         After:
   4              4
  / \            /
 2   5          2
     /
    6
(delete 5, connect 4 to 6)



Case 3: Two Children

Before:         After:
   4              4
  / \            / \
 2   5          2   6
    / \            /
   6   7          7
(delete 5, replace with 6, then delete 6 from right subtree)





5. Step-by-Step: How Deletion Works in Code

Let’s break down the logic for a 'delete' method in a BST node class.

Python Code Example:


class BinarySearchTreeNode:
    def __init__(self, data):
        self.data = data
        self.left = None
        self.right = None

    def delete(self, val):
        if val < self.data:
            if self.left:
                self.left = self.left.delete(val)
        elif val > self.data:
            if self.right:
                self.right = self.right.delete(val)
        else:
            # Node found
            if self.left is None and self.right is None:
                return None  # Case 1: No children
            elif self.left is None:
                return self.right  # Case 2: Only right child
            elif self.right is None:
                return self.left   # Case 2: Only left child
            else:
                # Case 3: Two children
                min_val = self.right.find_min()
                self.data = min_val
                self.right = self.right.delete(min_val)
        return self

    def find_min(self):
        if self.left is None:
            return self.data
        return self.left.find_min()




Line-by-Line Explanation

- if val < self.data:  
  Search for the node to delete in the left subtree.

- if val > self.data:  
  Search for the node to delete in the right subtree.

- else:  
  Node to delete is found.

  - if self.left is None and self.right is None:  
    Node is a leaf. Return 'None' to remove the reference from its parent.

  - elif self.left is None:  
    Node has only right child. Return the right child to connect it to the parent.

  - elif self.right is None:  
    Node has only left child. Return the left child to connect it to the parent.

  - else:  
    Node has two children.  
    - Find the minimum value in the right subtree ('find_min()').
    - Replace current node’s data with this minimum value.
    - Delete the duplicate node from the right subtree.

- return self:  
  Return the (possibly updated) node to the parent.





6. Why Return 'None' for Leaf Nodes?
When you return 'None' in the delete method, you are telling the parent node to remove its reference to this node.  
If you only set 'self.data = None', the node would still exist in the tree, but with an invalid value, breaking the BST property.

Example:
- If node 3 is a leaf and you delete it, the parent’s left or right pointer is set to 'None', so the node is removed from the tree.




7. How the Parent-Child Relationship is Broken:
When you call 'self.left = self.left.delete(val)' or 'self.right = self.right.delete(val)',  
- If the child’s delete method returns 'None', the parent’s pointer is set to 'None', breaking the link and removing the node.




8. In-Order Successor vs. In-Order Predecessor:
- In-Order Successor: Minimum value in the right subtree.
- In-Order Predecessor: Maximum value in the left subtree.

You can use either to replace a node with two children.  
- Most implementations use the in-order successor (min of right subtree).
- Alternatively, you can use the in-order predecessor (max of left subtree).



9. Complete Example:
Tree before deletion:

      17
     /  \
    4    20
   / \   / \
  1   9 18 23
           \
           34


Delete 20 (node with two children):
- Find min in right subtree (23).
- Replace 20 with 23.
- Delete 23 from right subtree.


Tree after deletion:

      17
     /  \
    4    23
   / \   / \
  1   9 18 34




10. Deletion Algorithm (Pseudocode)
function deleteNode(root, key):
    if root is None:
        return root
    if key < root.val:
        root.left = deleteNode(root.left, key)
    elif key > root.val:
        root.right = deleteNode(root.right, key)
    else:
        if root.left is None:
            return root.right
        elif root.right is None:
            return root.left
        temp = minValueNode(root.right)
        root.val = temp.val
        root.right = deleteNode(root.right, temp.val)
    return root




11. Practice and Visualization:
- Always check: After deletion, do an in-order traversal to verify the BST property is maintained.
- Try deleting:  
  - A leaf node  
  - A node with one child  
  - A node with two children  
  - The root node




12. Additional Concepts:
- Self-Balancing BSTs:  
  In AVL or Red-Black Trees, after deletion, the tree may need to be rebalanced to maintain O(log n) operations.

- Deletion Complexity:  
  - O(h), where h is the height of the tree (O(log n) for balanced, O(n) for skewed).

- Edge Cases:  
  - Deleting the root node.
  - Deleting a node not present in the tree (should do nothing).




13. Summary Table:

| Case                | Action                                                                 |
|---------------------|------------------------------------------------------------------------|
| Leaf node           | Remove node (return None to parent)                                    |
| One child           | Connect parent to child (return child to parent)                       |
| Two children        | Replace with in-order successor/predecessor, then delete that node     |




14. References:
- [GeeksforGeeks – BST Deletion](https://www.geeksforgeeks.org/binary-search-tree-set-2-delete/)
- [Programiz – BST Deletion](https://www.programiz.com/dsa/binary-search-tree#deletion)
- [Wikipedia – BST](https://en.wikipedia.org/wiki/Binary_search_tree)



In summary:  
BST deletion is about carefully handling three cases (leaf, one child, two children) to maintain the BST property. The key is to update parent pointers correctly and use in-order successor/predecessor for nodes with two children. Practice with diagrams and code to build intuition!



